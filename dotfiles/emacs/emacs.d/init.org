#+PROPERTY: header-args :tangle "init.el" :results silent
* Emacs Config
  
  このファイルはEmacsの設定ファイルです。
  ~~/.emacs.d/init.el~ に書き出されます。

  基本的には[[https://emacs-jp.github.io/tips/emacs-in-2020][Emacs-jp の 2020年代のEmacs入門]] と [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][SystemCrafters]]をベースにしています。
  
** 設定ファイル設定  
*** パッケージ管理
    Emacsのパッケージ管理には [[https://github.com/conao3/leaf.el][leaf.el]] を使っているため、
    その初期化をします。

    #+begin_src elisp
      ;; Leaf configurations
      (eval-and-compile
	(when (or load-file-name byte-compile-current-file)
	  (setq user-emacs-directory
	   (expand-file-name
	       (file-name-directory (or load-file-name byte-compile-current-file)
	 )))))

      (setq tab-width 4)
      (eval-and-compile
	  (customize-set-variable
	      'package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
				 ("melpa" . "https://melpa.org/packages/")
				 ("org"   . "https://orgmode.org/elpa/")
				 ))
	  (package-initialize)
	  (unless (package-installed-p 'leaf)
	      (package-refresh-contents)
	      (package-install 'leaf)
	      )

	  (leaf leaf-keywords
		:ensure t
		:init
		;; Optional packages if you want to use :hydra, :el-get, :blackout,,,

		(leaf el-get :ensure t) ; Githubにあるパッケージを使用するために必要
		(leaf-keywords-init)
		)
	  )

    #+end_src
**** ヘルパー用パッケージ
     パッケージ管理のヘルパー用パッケージを入れます。
    
***** ツリー表示をする
      生成後の ~init.el~ について、imenuを用いたアウトライン表示を提供してくれます。
     #+begin_src elisp
       (leaf leaf-tree :ensure t)
     #+end_src

***** package.elから自動でleafを生成する
     #+begin_src elisp
       (leaf leaf-convert :ensure t)
     #+end_src

** 独自ライブラリの読み込み

   自分で作成したライブラリを読み込みます。
   
   #+begin_src elisp
	 (leaf load-my-lib
	   :load-path "~/.emacs.d/lib/"
	   :require
	   cj-bc/string
	   ghq
	   )
   #+end_src

   
*** blog
    #+begin_src elisp
      (leaf blog
	:require t
	:custom
	(blog-post-dir-path . "~/Documents/ghq/github.com/Cj-bc/blog/posts")
	)
    #+end_src
    
    #+begin_src elisp
      (leaf ol-blog
	:require t
	:ensure nil
    
*** Notes

	#+begin_src elisp
	  (leaf ol-notes
		:require t
		:ensure nil
		:custom
		(ol-notes-root-dir . "~/Documents/notes")
		)
	#+end_src
	
*** org-diary

    #+begin_src elisp
      (leaf org-diary
	:require t
	:ensure nil
	:custom
	(org-diary-directory . "~/Dropbox/roam/daily")
	(org-diary-template . "~/.emacs.d/templates/org-capture/diary")
	)
    #+end_src
** 入力メゾット
*** DDSKK

    #+begin_src elisp
      (leaf ddskk :ensure t
	  :bind
	  ("C-x C-j" . skk-mode)
	  :custom
	  (default-input-method . "japanese-skk")
	  :config
	  (add-to-list 'auto-mode-alist '(".*\\.dict$" . skk-jisyo-edit-mode))
	  (skk-mode)
	  )
    #+end_src
** Org mode!!!
   Org modeが使いたくてEmacsに来たので...
   
   #+begin_src elisp :noweb yes 
     (leaf org
       :bind-keymap
       ("C-c o" . '(keymap (?a . org-agenda-list)
			   (?t . org-todo-list)
			   (?c . org-capture)
			   ))
       :hook
       <<leaf-org-hook>>
       :custom
       (org-global-properties . '(("TASK_KIND_ALL" . "やること 勉強 休憩 生活")
				  ("BLOG_POST_KIND_ALL" . "Memo Diary Knowledge Advertisment Translation HowTo")
				  ("BLOG_POST_PROGRESS_ALL" . "Empty WIP Published")
				  ("BLOG_POST_STATUS_ALL" . "Normal Archive Accuracy Outdated")
				  ))
       (org-link-abbrev-alist . '<<leaf-org-external-link--get-list()>>)
       (org-todo-keywords . '<<leaf-org-todo-keywords-construct()>>)
       <<leaf-org-custom>>
       :config
       <<leaf-org-config>>
       )
   #+end_src
*** テーブル書式
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    下のテーブルに追加すれば自動的に追加される。
    ~org-clock-clocktable-default-properties~ と ~org-agenda-clockreport-parameter-plist~ は同じにしてある。
    
    #+NAME: leaf-org-table-format
    | :maxlevel  | 4      | タイムを個別で表示する深さ                |
    | :scope     | agenda | 統計の範囲をagendaファイル全体に          |
    | :block     | today  | 今日のCLOCKのみを統計対象にする           |
    | :link      | t      | 各CLOCKへのリンクを付与する               |
    | :fileskip0 | t      | CLOCKがなかったファイルを表示しないように |

    #+NAME: leaf-org-table-format--get-properties-list
    #+begin_src elisp :var inp=leaf-org-table-format :tangle no
      (defun read-org-var (raw)
	"Read variable from org mode. 
	 As it returns number if it is number, otherwise string"
	(cond ((stringp raw) (read raw))
	       (t raw))
	)

      (seq-map 'read-org-var
	       (flatten-list
		     (seq-map (lambda (row)
				 `(,(elt row 0) ,(elt row 1)))
			      inp)))
    #+end_src

    #+HEADER: :noweb-ref leaf-org-custom
    #+begin_src elisp :results output :noweb yes :tangle no
    (org-clock-clocktable-default-properties . '<<leaf-org-table-format--get-properties-list()>>)
    (org-agenda-clockreport-parameter-plist . org-clock-clocktable-default-properties)
    #+end_src

*** Agenda設定
    :PROPERTIES:
    :header-args: :tangle no
    :END:
    
**** Agendaでは行数を表示しないように
    #+HEADER: :noweb-ref leaf-org-hook
    #+begin_src elisp
      (org-agenda-mode-hook . (lambda () (display-line-numbers-mode -1)))
    #+end_src

**** Agenda file
     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       (setq org-agenda-files (directory-files "~/Dropbox" t "\.org$"))
     #+end_src

**** Custom agenda

     
     #+HEADER: :noweb-ref leaf-org-custom
     #+begin_src elisp
       (org-agenda-custom-commands .
				   '(("x"
				      "全てのスケジュールを表示します"
				      agenda
				      ""
				      ((org-agenda-span 'year)
				       (org-agenda-entry-types '(:scheduled)))
				      )
				     ("p"
				      "プロジェクト固有のTODO"
				      todo
				      "TODO"
				      ((org-agenda-files projectile-known-projects)
				       (org-agenda-prefix-format '((todo . "%i %(format (cj-bc-org-agenda-get-project-name file)):\t")))
				       )
				      )
				     ("b"
				      "ブログ記事の進捗管理"
				      tags
				      "+LEVEL=1-BLOG_POST_PROGRESS=\"Published\""
				      ((org-agenda-files
					(directory-files (concat (ghq-root) "/github.com/Cj-bc/blog/posts") t "\.org$")
					)
				       (org-agenda-prefix-format '((search . "%i ")))
				       (org-overriding-columns-format "%BLOG_POST_PROGRESS %TAGS %ITEM")
				      )
				     ))
				   )
     #+end_src

     ヘルパー用の関数。プロジェクト名を取得して、
     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       (defun cj-bc-org-agenda-get-project-name (fullPath)
	 "This is helper function just for my custom org-agenda-view.
       Get project name from full path."

	 (string-match "/\\([^/]+/\\)+\\([^/]+/[^/]+\\)/" fullPath)
	 (match-string 2 fullPath))
     #+end_src

*** Todo設定
    #+HEADER: :noweb-ref leaf-org-custom
    #+HEADER: :tangle no
    #+begin_src elisp
      (org-enforce-todo-dependencies . t)
    #+end_src

**** Todoの種類
     Todoは複数種類作ってあり、リストから自動的に生成されます。

     リストの中で ~_DELIMITER_~ のみは特別な記号として扱われ、
     ~|~ (TODOとDONEを分けるやつ)に変換されます。(直接書けないため)
***** タスク管理用TODO
      #+NAME: Org-todoKeywords-list-todo
      + TODO
      + SOMEDAY
      + WAITING
      + _DELIMITER_
      + DONE
      + OutOfDate

      リストの内容はStringのListとして渡される
      
***** リーディングリスト
      #+NAME: Org-todoKeywords-list-reading
      + ReadLater(a!)
      + Reading(i!)
      + _DELIMITER_
      + Read(d!)

***** 買い物リスト
      #+NAME: Org-todoKeywords-list-shopping
      + ToBuy
      + _DELIMITER_
      + Bought(!)
	
***** ノート・知識ベースの状態管理
      更新が必要なのか、それとも最新なのか
      必要なタグって何だろうか？
      Wikiにあるようなシステムを想定している。
      
      #+NAME: Org-todoKeywords-list-noteStatus
      + Outofdate
      + Accuracy
      + WIP
      + _DELIMITER_
      + Clean
	
***** 設定

      #+HEADER: :var todo=Org-todoKeywords-list-todo
      #+HEADER: :var reading=Org-todoKeywords-list-reading
      #+HEADER: :var shoppingList=Org-todoKeywords-list-shopping
      #+HEADER: :var noteStatus=Org-todoKeywords-list-noteStatus
      #+NAME: leaf-org-todo-keywords-construct
      #+begin_src elisp :tangle no

	(defun replaceDelimiter (target-list)
	  (seq-map (lambda (a) (if (string= (car a) "_DELIMITER_")
				   "|" (car a)))
		   target-list))

	(seq-map (lambda (x) `(sequence ,@(replaceDelimiter x)))
	     (list todo reading shoppingList noteStatus))
      #+end_src

      #+HEADER: :noweb-ref leaf-org-custom
      #+begin_src elisp :noweb yes :tangle no
	(org-todo-keywords . '<<Org-todoKeywords-construct()>>)
      #+end_src

*** 外部Link
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    #+NAME: leaf-org-external-link--list
    | github    | https://github.com/%s                  |
    | youtube   | https://youtube.com/watch?v=%s         |
    | wikipedia | https://en.wikipedia.org/wiki/%s       |
    | archw     | https://wiki.archlinux.jp/index.php/%s |

    #+NAME: leaf-org-external-link--get-list
    #+begin_src elisp :var links=leaf-org-external-link--list :results raw :tangle no
      (seq-map '(lambda (link) `(,(elt link 0) . ,(elt link 1))) links)
    #+end_src


**** Ghq対応

     ghq:Cj-bc/dotfiles みたいなリンクを貼れるようにする。
     
     #+HEADER:  :noweb-ref leaf-org-config
     #+begin_src elisp
       (leaf org-ghq :require t)
     #+end_src
     
***** TODO Projectile連携する
     現在はDiredが開くけど、多分Projectileと連携させた方が良くなりそう

***** TODO 補完を有効にする
*** 出力設定
    :PROPERTIES:
    :header-args: :tangle no
    :END:
**** LaTeX
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     [[https://qiita.com/kawabata@github/items/1b56ec8284942ff2646b][org-mode で日本語LaTeXを出力する方法 @kawabata@github]]を参考に。

     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       (setq TeX-engine 'luatex)
     #+end_src

	 
     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       ;; TODO: 依存を減らす
       ;; caseが使いたいだけなので自作したい。
       (require 'cl)


       (defun remove-org-newlines-at-cjk-text (&optional _mode)
	 "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
	 (interactive)
	 (goto-char (point-min))
	 (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
	   (if (and (> (string-to-char (match-string 2)) #x2000)
		    (> (string-to-char (match-string 3)) #x2000))
	       (replace-match "\\1\\2\\3"))
	   (goto-char (point-at-bol))))

       (with-eval-after-load "ox"
	 (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))

       (defun my-latexmk-command (latex options &optional target output)
	 "Generate LatexMk command for LATEX, (LatexMk-)OPTIONS, TARGET and OUTPUT directory."
	 (let* ((latex-options
		 '("-src-specials" "-file-line-error" "-interaction=nonstopmode"
		   "-shell-escape"))
					       ; "-shell-escape" "-synctex=1"))
		(luatex-option
		 (mapconcat (lambda (opt) (concat "-" opt)) latex-options " "))
		(latex-option
		 (mapconcat 'identity latex-options " ")))
	   (concat "latexmk -gg " options " "
		   (case latex
		     ('euptex "-pdfdvi -latex='uplatex ")
		     ('xetex  "-pdf -pdflatex='xelatex ")
		     ('luatex "-pdf -pdflatex='lualatex "))
		   (case latex
		     ('luatex luatex-option)
		     (t latex-option))
		   "' "
		   (if output (concat "-output-directory=" output " "))
		   target)))


       (defvar my-org-latex-math-symbols-packages-alist
	 '(("" "amssymb"   t)
	   ("" "amsmath"   t)
	   ("" "amsxtra"   t)
					       ; ("" "bussproofs" t)
	   ("" "isomath"   t)
	   ("" "latexsym"  t)
	   ("" "marvosym"  t)
	   ("" "stmaryrd"  t)
	   ("" "textcomp"  t)
	   ("" "wasysym"   t)))

       (with-eval-after-load "ox-latex"

	 (add-hook 'org-export-before-processing-hook 'my-ox-latex-tex-engine-setup)

	 (defun my-ox-latex-tex-engine-setup (backend)
	   (message "backend=%s" backend)
	   (when (equal backend 'latex)
	     (my-ox-latex-engine-set TeX-engine)))

	 (defun my-ox-latex-engine-set (latex)
	   "Set up LATEX environments."

	   (setq org-latex-default-packages-alist
		 `(
		   ,@(case latex
		       ('luatex '(("" "luacode" t)
				  ("" "luatexja-otf" t)))
		       ;; noCJKchecksiingle で、\meaning の非BMPでの分割を抑止
		       ('xetex  '(("AutoFallBack=true,noCJKchecksingle" "zxjatype" t)
				  ))
		       ('euptex '(("uplatex,multi" "otf" t)
				  ("" "okumacro" t)))
		       (t nil))
					       ; ("" "fixltx2e" nil)
		   ("" "fancyvrb" t)
		   ("" "longtable" nil)
		   ("" "float" nil)
		   ;; LaTeX標準文字記号マクロ
		   ,@my-org-latex-math-symbols-packages-alist
		   ;;("" "tabulary" t)
		   ;;("" "bigtabular" t)
		   ("" "multicol" t)
		   ;; その他のデフォルトで使用するLaTeX設定（以下は例）
		   ,(concat
		     "\\tolerance=1000\n"
		     "\\providecommand{\\alert}[1]{\\textbf{#1}}\n"
		     "\\fvset{xleftmargin=2em}\n")
		   ))

	   (setq org-latex-packages-alist
		 `(
		   ,(case latex
		      ('xetex  '("" "graphicx"  t))
		      ('euptex '("dvipdfmx" "graphicx"  t))
		      (t       '("pdftex" "graphicx"  t)))
		   ;; hyperref: PDFでハイパーリンクを生成
		   ;; colorlinks=true を入れると、graphicx が dvipdfmx で失敗するので注意。
		   ,(case latex
		      ('luatex '("pdftex,pdfencoding=auto" "hyperref" t))
		      ('euptex '("dvipdfm" "hyperref"  t))
		      ('xetex  '("xetex" "hyperref"  t))
		      (t       '("pdftex" "hyperref"  t)))
		   ;; biblatex を入れると重くなるので、使用するorg-fileのみ、
		   ;; `+LATEX_HEADER: \usepackage[backend=biber]{biblatex}'
		   ;; で入れるほうが良い。。
		   ;; ("backend=biber", "biblatex" t)
		   ("" "listings")
		   ("" "color")))

	   (setq org-latex-classes
		 `(("article"
		    ,(case latex
		       ('luatex "\\documentclass{ltjsarticle}\n")
		       ('xetex  "\\documentclass[a4paper]{bxjsarticle}\n")
		       ('euptex "\\documentclass[a4j,uplatex]{jsarticle}\n")
		       (t       "\\documentclass[11pt]{article}"))
		    ("\\section{%s}" . "\\section*{%s}")
		    ("\\subsection{%s}" . "\\subsection*{%s}")
		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
		    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
		   ("report"
		    ,(case latex
		       ('luatex "\\documentclass{ltjsarticle}\n")
		       ('xetex  "\\documentclass[a4paper]{bxjsreport}\n")
		       ('euptex "\\documentclass[11pt,report,uplatex]{jsbook}\n")
		       (t       "\\documentclass[11pt]{article}"))
		    ("\\section{%s}" . "\\section*{%s}")
		    ("\\subsection{%s}" . "\\subsection*{%s}")
		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
		    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
		   ("book"
		    ,(case latex
		       ('luatex "\\documentclass{ltjsarticle}\n")
		       ('xetex  "\\documentclass[9pt,a4paper]{bxjsreport}\n")
		       ('euptex "\\documentclass[9pt,a5j,uplatex]{jsbook}\n")
		       (t       "\\documentclass[11pt]{book}"))
		    ("\\part{%s}" . "\\part*{%s}")
		    ("\\chapter{%s}" . "\\chapter*{%s}")
		    ("\\section{%s}" . "\\section*{%s}")
		    ("\\subsection{%s}" . "\\subsection*{%s}")
		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
		   ("beamer"
		    ,(concat
		      (case latex
			('xetex
			 "\\documentclass[compress,xdvipdfmx]{beamer}\n")
			(t "\\documentclass[compress,dvipdfmx]{beamer}\n"))
		      "\\usetheme{AnnArbor}\n"
		      "\\setbeamertemplate{navigation symbols}{}\n"
		      "[NO-PACKAGES]\n"
		      "\\usepackage{graphicx}\n")
		    org-beamer-sectioning)))

	   (setq org-latex-pdf-process (list (my-latexmk-command TeX-engine "-pv" "%f" "%o"))))

	 )
     #+end_src

*** captureテンプレート
    :LOGBOOK:
    CLOCK: [2021-07-05 Mon 12:34]--[2021-07-05 Mon 12:34] =>  0:00
    :END:
    #+HEADER: :tangle no :noweb-ref leaf-org-custom
    #+begin_src elisp
      `(org-capture-templates .
			     '(("d" "default" plain
				(file "capture.org")
				"")
			       ("b" "blog posts")
			       ("bp" "normal post" plain
				(function blog-visit-new-post)
				(file "~/.emacs.d/templates/org-capture/blog")
				:clock-in t
				:clock-resume t
				)
			       ("bd" "dialy post" plain
				(function blog-visit-new-diary)
				(file "~/.emacs.d/templates/org-capture/blog-diary")
				)
			       ("d" "diary")
			       ("dm" "Memo" entry
				(function ,(apply-partially 'org-diary-visit-today "Memo"))
				)
			       ))
    #+end_src
*** Org babel
    :PROPERTIES:
    :header-args: :tangle no
    :END:
    #+HEADER: :noweb-ref leaf-org-config
    #+begin_src elisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((awk . t)
	 (shell . t)
	 (haskell . t)
	 ))
    #+end_src
*** Org roamでメモ管理
    :PROPERTIES:
    :header-args: :tangle no
    :END:
    [[https://www.orgroam.com/][org roam]]は、

    #+HEADER: :noweb-ref leaf-org-config :noweb yes
    #+begin_src elisp
      (leaf org-roam
        :emacs>= 26.1
        :ensure t
        :pre-setq
        (org-roam-v2-ack . t)
        :custom
        `(org-roam-directory . ,(file-truename "~/Dropbox/roam"))
        (org-roam-link-auto-replace . t)
        (org-roam-graph-viewer . "qutebrowser")
        (org-roam-completion-everywhere . t)
        <<leaf-org-roam-custom>>
        :config
        <<leaf-org-roam-config>>
        (org-roam-db-autosync-mode)
        )
    #+end_src


    #+begin_src elisp
      (leaf org-roam-evil-key
	:after org-roam evil
	:config
	(evil-define-key 'normal 'global (kbd "SPC r d") 'org-roam-dailies-goto-today)
	(evil-define-key 'normal 'global (kbd "SPC r s") 'org-roam-node-find)
	(evil-define-key 'visual 'org-roam-mode-map (kbd "RET") 'org-roam-node-insert)
	(evil-define-key 'visual 'org-roam-mode-map (kbd "<S-return>") 'cjbc-org-roam-insert-immediate-private)
	(evil-define-key 'normal 'global (kbd "SPC r l") 'org-roam-buffer-toggle)
	)
    #+end_src


**** TODO COMMENT テンプレート

     ~DIR~ を設定したいことが多々あるので、 ~#+title~ ではなくエントリにしてほしい。

     #+HEADER: :tangle no :noweb-ref leaf-org-roam-custom
     #+begin_src elisp
       (org-roam-capture-templates .
				   '(("o" "object" plain
				      "%?"
				      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :object:" ("${title}"))
				       :unnarrowed t)
				   ("p" "person" plain
				      "%?"
				      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :person:" ("${title}"))
				       :unnarrowed t)
				   ("r" "reference" plain
				      "%?"
				      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :reference:" ("${title}"))
				       :unnarrowed t)
				      ))
     #+end_src

     #+HEADER: :tangle no :noweb-ref leaf-org-roam-custom
     #+begin_src elisp
       (org-roam-dailies-capture-templates .
					   (("n" "new" entry #'org-roam-capture--get-point
					     "* %?" :file-name "daily/%<%Y-%m-%d>"
					     :head "#+title: %<%Y-%m-%d>")
					    ("d" "やったこと" entry #'org-roam-capture--get-point

					     :file-name "daily/%<%Y-%m-%d>"
					    )
					   )
     #+end_src
     
**** TODO タグの一覧を作る
     今だと似ているタグが複数出来てしまったりしてると思うので。

     + 🔖 :: 視聴した資料や、動画などへのメモ
     + 💡 :: アイデア等
     + 🎬 :: 動画の内容
       
**** Privete roamを作成するためのラッパー

     Roamには、プライベートなノードをgpg保護された状態で保存する機能がある。
     ただ、そのためには ~org-roam-encrypt-files~ を手動で変えなきゃいけなくて面倒だたので、
     関数にした。

     #+noweb-ref: leaf-org-roam-config
     #+begin_src elisp
       (defun cjbc-org-roam-private (&optional initial-prompt completions filter-fn no-confirm) 
	 "Small wrapper of 'org-roam-find-file' that will create new post with private(encrypted)"
	 (interactive)
	 (setq-local org-roam-encrypt-files--old-value org-roam-encrypt-files)
	 (setq org-roam-encrypt-files t)
	 (org-roam-capture)
	 (setq org-roam-encrypt-files org-roam-encrypt-files--old-value)
	 )
     #+end_src

     #+noweb-ref: leaf-org-roam-config
     #+begin_src elisp
       (defun cjbc-org-roam-insert-immediate-private (&optional initial-prompt completions filter-fn no-confirm)
	   "Small wrapper of 'org-roam-insert-immediate' to insert new encrypted post"
	 (interactive)
	 (setq-local org-roam-encrypt-files--old-value org-roam-encrypt-files)
	 (setq org-roam-encrypt-files t)
	 (org-roam-insert-immediate)
	 (setq org-roam-encrypt-files org-roam-encrypt-files--old-value)
	 )
     #+end_src
**** org-roam-ui

     #+begin_src elisp
       (leaf org-roam-ui
	 :ensure t
	 :after org-roam
	 )
     #+end_src

*** org pomodoro
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    今手元にオーディオプレイヤー入れてなかったので
    一旦 ~org-pomodoro-play-sounds~ はオフに。
    
    #+HEADER: :noweb-ref leaf-org-config
    #+begin_src elisp
      (leaf org-pomodoro
	    :req "alert-0.5.10" "cl-lib-0.5"
	    :ensure t
	    :after alert
	    :custom (org-pomodoro-play-sounds . nil)
	    :hook
	    (org-pomodoro-finished-hook
	     . (lambda () (start-process "org-pomodoro-finished-notification" nil
					 "dunstify" "--appname" "Emacs.org-pomodoro"
					 "Pomodoro finished! Start break time...")))
	    (org-pomodoro-break-finished-hook
	     . (lambda () (start-process "org-pomodoro-break-finished-notification" nil
					 "dunstify" "--appname" "Emacs.org-pomodoro"
					 "Pomodoro break is over!")))
	    )
    #+end_src

*** TODO Org timeline -- Agendaでタイムライン表示する
    #+begin_src elisp :tangle no
      (leaf org-timeline
	:ensure t
	:hook
	(org-agenda-finalize-hook . (lambda () (org-timeline-insert-timeline)))
	)
    #+end_src

*** TODO 通知設定: org-notifications
    #+begin_src elisp :tangle no
      (leaf org-notifications
	:ensure t
	:after org
	:config
	(org-notifications-start)
	)
    #+end_src

** SNS
*** Twittering-mode
    ツイッターやろうぜ!!お前ボールな!!
    #+begin_src elisp
      (leaf twittering-mode :ensure t)
    #+end_src
*** newsticker
    RSSフィード閲覧用

    #+NAME: 購読中のフィード
    + [[https://www.moguravr.com/feed][Mogura VR]]
    + [[https://news.yahoo.co.jp/rss/topics/top-picks.xml][Yahoo Top picks]]
    + [[https://news.yahoo.co.jp/rss/topics/domestic.xml][Yahoo Japan]]
    
    #+begin_src elisp :tangle no
      (defun parse-feed-link (feed-link)
      "Parse Feed link formatted in Org's link"
       (let ((retrive-link-and-name-regex "\\[\\[\\([^]]+\\)\\]\\[\\([^]]+\\)\\]\\]"))
	 ((string-match retrieve-link-and-name-regex feed-link)
	  ((match-string 2 feed-link) . (match-string 1 feed-link))
	  )
	 )
       )


      (parse-feed-link "[[hoge][aaa]]")
    #+end_src


    
    #+begin_src elisp
      (leaf newsticker
	  :doc "A Newsticker for Emacs."
	  :tag "builtin"
	  :added "2021-05-20"
	  :hook (newsticker-mode-hook . (lambda () (toggle-truncate-lines -1)))
	  :custom
	  (newsticker-url-list . '(("Mogura VR" "https://www.moguravr.com/feed" nil nil nil)
				   ("Yahoo top picks" "https://news.yahoo.co.jp/rss/topics/top-picks.xml"
				    nil nil nil)
				   ("Yahoo japan" "https://news.yahoo.co.jp/rss/topics/domestic.xml"
				    nil nil nil)
				   ))
	  )
    #+end_src

** Evil
   これがあるから引っ越せた。
   #+begin_src elisp
     (leaf evil :ensure t
	:require t
	:config
	(evil-mode)
	(evil-define-key 'insert 'global (kbd "C-x C-o") 'completion-at-point)

	(leaf evil-org :ensure t
	  :hook
	  (org-mode-hook . evil-org-mode)
	  (org-agenda-mode-hook . evil-org-mode)

	  :config
	  (require 'evil-org-agenda)
	  (evil-org-agenda-set-keys)
	  (evil-define-key 'normal 'global (kbd "C-w C-v") 'evil-window-vnew)
	  )
	(leaf evil-surround :ensure t
	  :after 'evil-core
	  :config
	  (evil-surround-mode)
	  (evil-define-key 'visual 'global "sd" 'evil-surround-delete)
	  (evil-define-key 'visual 'global "sa" 'evil-surround-region)
	  (evil-define-key 'visual 'global "sr" 'evil-surround-change)
	)
	(leaf evil-numbers :ensure t
	  :after 'evil-core
	  )
	)
   #+end_src

*** TODO 分解する
*** TODO DocViewでも使えるようにする
    多分書くor拾ってくる
*** textobjects
    #+begin_src elisp
      (leaf evil-textobj-parameter
	    :el-get Cj-bc/evil-textobj-parameter
	    :require t
	    :config
	    (define-key evil-inner-text-objects-map "," 'evil-textobj-parameter-inner-parameter)
	    (define-key evil-outer-text-objects-map "," 'evil-textobj-parameter-outer-parameter)
	    )
    #+end_src
** Projectile
   #+begin_src elisp :noweb yes 
     (leaf projectile
       :ensure t
       :custom
       (projectile-project-search-path . (list ghq-root))
       (projectile-enable-caching . t)
       (projectile-project-root-files-bottom-up
        . '<<leaf-projectile-project-root-files-bottom-up--list()>>)

       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
       )
   #+end_src


   #+NAME: leaf-projectile-project-root-files-bottom-up--list
   #+HEADER: :var l=leaf-projectile-project-root-files-bottom-up--names
   #+begin_src elisp :results value :tangle no
     (seq-map 'car l)
   #+end_src

*** プロジェクトルートと見做すファイルの一覧

    #+NAME: leaf-projectile-project-root-files-bottom-up--names
    + angular.json
    + stack.yaml
    + .git
    + .projectile
      
** Ivy
   #+begin_src elisp
     (leaf counsel
       :ensure t
       :config
       (ivy-mode 1)
       :bind
       (("M-x" . counsel-M-x)
	("C-x C-f" . counsel-find-file)
	("C-h f" . counsel-describe-function)
	("C-h v" . counsel-describe-variable)
	)
       :config
       (setq ivy-re-builders-alist
	     '((t . ivy--regex-fuzzy)))
       (when (featurep 'projectile)
	 (setq projectile-completion-system 'ivy))
       )
   #+end_src
   
*** Posframeを使う
    場合によってはposframeの方がありがたいので、posframeを入れる

    #+begin_src elisp
      (leaf ivy-posframe
	:ensure t
	:after posframe ivy
	)
    #+end_src
** Lsp mode
   #+begin_src elisp
     (leaf lsp-mode

       :commands lsp
       :ensure t
       :hook
       (sh-mode-hook . lsp)
       (haskell-mode-hook . lsp)
       (kotlin-mode-hook . lsp)
       )
   #+end_src


   #+begin_src elisp
     (leaf lsp-bash
       :config
       (defun lsp-bash--bash-ls-server-command ()
	 '("~/.local/share/vim-lsp-settings/servers/bash-language-server/bash-language-server" "start"))

       )
   #+end_src
** Magit
   #+begin_src elisp
     (leaf magit
       :ensure t
       )
   #+end_src
** 開発環境
*** ドキュメント作成
	#+begin_src elisp :tangle no
	  (leaf plantuml-mode
		:ensure t)
	#+end_src
*** Repl
    #+begin_src elisp
      (leaf quickrun
	:doc "Run commands quickly"
	:req "emacs-24.3"
	:tag "emacs>=24.3"
	:added "2022-01-12"
	:url "https://github.com/syohex/emacs-quickrun"
	:emacs>= 24.3
	:ensure t)
    #+end_src
*** 環境の一致

    #+begin_src elisp
      (leaf editorconfig
	:ensure t)
    #+end_src
** メモ取り・ナレッジベース構築
*** Orgファイル以外でのリンクを構築する
    Orgファイル以外でも、リンク機能が使えると便利
    (e.g. ソースコードのコメントにroamへのリンクを貼るなど)
    なので、Hyperboleを使ってみる
    
**** GNU Hyperbole
     #+begin_src elisp
       (leaf hyperbole
	 :ensure t
	 )
     #+end_src
     
*** Wiki

    #+begin_src elisp
      (leaf org-wiki
	:ensure nil
	:custom
	(org-wiki-location-list . '("~/Documents/wiki"))
	(org-wiki-location . (car org-wiki-location-list))

	)
    #+end_src
** 見栄えを良くする
*** rainbow-delimiters
    Lisp系の言語は括弧の対応がとても見辛いので、
    対応する括弧に色を付けてもらう
    
    #+begin_src elisp
	(leaf rainbow-delimiters :ensure t
	  :hook
	  (prog-mode-hook . rainbow-delimiters-mode))
    #+end_src

** プログラミング言語毎の設定
*** Haskell
    #+begin_src elisp
      (leaf haskell-mode :ensure t)
    #+end_src
*** TypeScript
    #+begin_src elisp
      (leaf typescript-mode
	:ensure t
	)
    #+end_src
*** Toml
    #+begin_src elisp
      (leaf toml-mode
	:ensure t
	)
    #+end_src
*** Kotlin
    #+begin_src elisp
      (leaf kotlin-mode
	:ensure t
	)
    #+end_src

    #+begin_src elisp
      (leaf ob-kotlin
	:ensure t
	)
    #+end_src
*** CSharp
    #+begin_src elisp
      (leaf csharp-mode
	:added "2021-09-25"
	:url "https://github.com/emacs-csharp/csharp-mode"
	:emacs>= 26.1
	:ensure t)
    #+end_src
*** Dockerfile

    #+begin_src elisp
      (leaf dockerfile-mode
	:ensure t
	)
    #+end_src
*** Rust
    #+begin_src elisp
      (leaf rust-mode
	:doc "A major-mode for editing Rust source code"
	:req "emacs-25.1"
	:tag "languages" "emacs>=25.1"
	:added "2022-01-20"
	:url "https://github.com/rust-lang/rust-mode"
	:emacs>= 25.1
	:ensure t)
      (leaf cargo-mode
	:doc "Cargo Major Mode. Cargo is the Rust package manager"
	:req "emacs-25.1"
	:tag "tools" "emacs>=25.1"
	:added "2022-01-20"
	:url "https://github.com/ayrat555/cargo-mode"
	:emacs>= 25.1
	:ensure t)
    #+end_src
** Appearences
   #+begin_src elisp
     (leaf appearences
       :config
       (set-terminal-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8)
       (prefer-coding-system 'utf-8)
       (add-to-list 'default-frame-alist '(font . "Cica-20"))
     )
   #+end_src
   
*** テーマ
    #+begin_src elisp
      (leaf doom-themes
	; :doc "an opinionated pack of modern color-themes"
	; :req "emacs-25.1" "cl-lib-0.5"
	; :tag "faces" "custom themes" "emacs>=25.1"
	; :added "2021-06-21"
	; :url "https://github.com/hlissner/emacs-doom-themes"
	; :emacs>= 25.1
	:ensure t
	:config
	(load-theme 'doom-dracula t)
	)
    #+end_src

** keybinds
   #+begin_src elisp
     (leaf window-movements
	 :doc "vim-like window movement keybinds"
	 :bind
	 (("C-c C-w h" . windmove-left)
	  ("C-c C-w j" . windmove-down)
	  ("C-c C-w k" . windmove-up)
	  ("C-c C-w l" . windmove-right)
	 )
       )
   #+end_src

** configure global modes
   #+begin_src elisp
     (leaf configure-global-modes
       :config
       (column-number-mode)
       (global-display-line-numbers-mode t)
       (setq display-line-numbers-type 'relative)
       (menu-bar-mode 0)
       (tool-bar-mode 0)
       (scroll-bar-mode 0)
       (auto-revert-mode)

       (show-paren-mode)
     )
   #+end_src

   
*** DocView

    基本的には、Evilとの相性や誤キー押下を防ぐための設定
    #+begin_src elisp
      (leaf doc-view
	:doc "Document viewer for Emacs"
	:tag "builtin"
	:added "2021-06-25"
	:bind (:doc-view-mode-map
	       ("k" . doc-view-previous-page)
	       ("j" . doc-view-next-page)
	       ("w" . nil)
	       )
	:hook (doc-view-minor-mode-hook
	       . (lambda () (display-line-numbers-mode "Disable")))
	)
    #+end_src



** custom, etc
   #+begin_src elisp
     (setq custom-file "~/.emacs.d/custom.el")
     ; (load custom-file)

     (provide 'init)
   #+end_src
