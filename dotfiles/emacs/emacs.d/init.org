#+PROPERTY: header-args :tangle "init.el" :results silent
* Emacs Config
  
  このファイルはEmacsの設定ファイルです。
  ~~/.emacs.d/init.el~ に書き出されます。

  基本的には[[https://emacs-jp.github.io/tips/emacs-in-2020][Emacs-jp の 2020年代のEmacs入門]] と [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][SystemCrafters]]をベースにしています。
  
** 設定ファイル設定  
*** パッケージ管理
    Emacsのパッケージ管理には [[https://github.com/conao3/leaf.el][leaf.el]] を使っているため、
    その初期化をします。

    #+begin_src elisp
      ;; Leaf configurations
      (eval-and-compile
        (when (or load-file-name byte-compile-current-file)
          (setq user-emacs-directory
           (expand-file-name
               (file-name-directory (or load-file-name byte-compile-current-file)
         )))))

      (setq tab-width 4)
      (eval-and-compile
        (customize-set-variable
         'package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("org"   . "https://orgmode.org/elpa/")
                             ))
        (package-initialize)
        (unless (package-installed-p 'leaf)
          (package-refresh-contents)
          (package-install 'leaf)
          )

        (leaf leaf-keywords
          :ensure t
          :init
          ;; Optional packages if you want to use :hydra, :el-get, :blackout,,,
    
          (leaf el-get :ensure t) ; Githubにあるパッケージを使用するために必要
          (leaf-keywords-init)
          )
        )

    #+end_src
**** ヘルパー用パッケージ
     パッケージ管理のヘルパー用パッケージを入れます。
    
***** ツリー表示をする
      生成後の ~init.el~ について、imenuを用いたアウトライン表示を提供してくれます。
     #+begin_src elisp
       (leaf leaf-tree :ensure t)
     #+end_src

***** package.elから自動でleafを生成する
     #+begin_src elisp
       (leaf leaf-convert :ensure t)
     #+end_src

** 独自ライブラリの読み込み

   自分で作成したライブラリを読み込みます。
   
   #+begin_src elisp
     (leaf load-my-lib
       :load-path "~/.emacs.d/lib/"
       :require
       cj-bc/string
       ghq
       org-screenshot-attach
       )
   #+end_src

   
*** blog
    #+begin_src elisp
      (leaf blog
        :require t
        :custom
        (blog-post-dir-path . "~/Documents/ghq/github.com/Cj-bc/blog/posts")
        )
    #+end_src

    
    #+begin_src elisp
      (leaf ol-blog
        :require t
        :ensure nil
    
*** Notes

#+NAME: ol-notes
#+begin_src elisp
  (leaf ol-notes
        :require t
        :ensure nil
        :custom
        (ol-notes-root-dir . "~/Documents/roam/notes")
        )
#+end_src
	
*** org-diary

#+begin_src elisp
  (leaf org-diary
    :require t
    :ensure nil
    :custom
    (org-diary-directory . "~/Documents/roam/daily")
    (org-diary-template . "~/.emacs.d/templates/org-capture/diary")
    )
#+end_src
** 入力メゾット
*** DDSKK

    #+begin_src elisp
      (leaf ddskk :ensure t
          :bind
          ("C-x C-j" . skk-mode)
          :custom
          (default-input-method . "japanese-skk")
          :config
          (add-to-list 'auto-mode-alist '(".*\\.dict$" . skk-jisyo-edit-mode))
          (skk-mode)
          )
    #+end_src
** Org mode!!!
Org modeが使いたくてEmacsに来たので...

#+begin_src elisp :noweb yes
  (leaf org
    :bind-keymap
    ("C-c o" . '(keymap (?a . org-agenda)
                        (?t . org-todo-list)
                        (?c . org-capture)
                        ))
    :hook
    <<leaf-org-hook>>
    :custom
    (org-global-properties . '(("TASK_KIND_ALL" . "やること 勉強 休憩 生活")
                               ("BLOG_POST_KIND_ALL" . "Memo Diary Knowledge Advertisment Translation HowTo")
                               ("BLOG_POST_PROGRESS_ALL" . "Empty WIP Published")
                               ("BLOG_POST_STATUS_ALL" . "Normal Archive Accuracy Outdated")
                               ))
    (org-link-abbrev-alist . '<<leaf-org-external-link--get-list()>>)
    (org-todo-keywords . '<<leaf-org-todo-keywords-construct()>>)
    <<leaf-org-custom>>

    :config
    <<leaf-org-config>>
    )
#+end_src
*** テーブル書式
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    下のテーブルに追加すれば自動的に追加される。
    ~org-clock-clocktable-default-properties~ と ~org-agenda-clockreport-parameter-plist~ は同じにしてある。
    
    #+NAME: leaf-org-table-format
    | :maxlevel  | 4      | タイムを個別で表示する深さ                |
    | :scope     | agenda | 統計の範囲をagendaファイル全体に          |
    | :block     | today  | 今日のCLOCKのみを統計対象にする           |
    | :link      | t      | 各CLOCKへのリンクを付与する               |
    | :fileskip0 | t      | CLOCKがなかったファイルを表示しないように |

    #+NAME: leaf-org-table-format--get-properties-list
    #+begin_src elisp :var inp=leaf-org-table-format :tangle no
      (defun read-org-var (raw)
	"Read variable from org mode. 
	 As it returns number if it is number, otherwise string"
	(cond ((stringp raw) (read raw))
	       (t raw))
	)

      (seq-map 'read-org-var
	       (flatten-list
		     (seq-map (lambda (row)
				 `(,(elt row 0) ,(elt row 1)))
			      inp)))
    #+end_src

    #+HEADER: :noweb-ref leaf-org-custom
    #+begin_src elisp :results output :noweb yes :tangle no
    (org-clock-clocktable-default-properties . '<<leaf-org-table-format--get-properties-list()>>)
    (org-agenda-clockreport-parameter-plist . org-clock-clocktable-default-properties)
    #+end_src

*** Agenda設定

    #+begin_src elisp :tangle yes
      (leaf org/--agenda
        :ensure nil
        :after org
        :custom
        `(org-agenda-files ,(directory-files "~/Dropbox" t "\.org$"))
        (org-agenda-current-time-string . "→ ━━━━━━━━━━━━━━━━━━━━━━")
        (org-agenda-mode-hook . (lambda () (display-line-numbers-mode -1))) ;; 行数を表示しないようにする
        )
    #+end_src
    
**** Custom agenda
#+HEADER: :noweb yes
#+begin_src elisp
  (leaf org-agenda-custom-commands
    :ensure nil
    :after org
    :config
    <<leaf--org-agenda-config>>
    :custom
    (org-agenda-custom-commands .
                                '(("x"
                                   "全てのスケジュールを表示します"
                                   agenda
                                   ""
                                   ((org-agenda-span 'year)
                                    (org-agenda-entry-types '(:scheduled)))
                                   )
                                  ("p"
                                   "プロジェクト固有のTODO"
                                   todo
                                   "TODO"
                                   ((org-agenda-files projectile-known-projects)
                                    (org-agenda-prefix-format '((todo . "%i %(format (cj-bc-org-agenda-get-project-name file)):\t")))
                                    )
                                   )
                                  ("b"
                                   "ブログ記事の進捗管理"
                                   tags
                                   "+LEVEL=1-BLOG_POST_PROGRESS=\"Published\""
                                   ((org-agenda-files
                                     (directory-files (concat (ghq-root) "/github.com/Cj-bc/blog/posts") t "\.org$")
                                     )
                                    (org-agenda-prefix-format '((tags . " | ")))
                                    (org-overriding-columns-format "%BLOG_POST_PROGRESS %TAGS %ITEM")
                                    )
                                   )
                                  )))
#+end_src


ヘルパー用の関数。プロジェクト名を取得して、
#+HEADER: :noweb-ref leaf--org-agenda-config
#+begin_src elisp
  (defun cj-bc-org-agenda-get-project-name (fullPath)
 "This is helper function just for my custom org-agenda-view.
  Get project name from full path."

 (string-match "/\\([^/]+/\\)+\\([^/]+/[^/]+\\)/" fullPath)
 (match-string 2 fullPath))
#+end_src
*** Todo設定
    #+HEADER: :noweb-ref leaf-org-custom
    #+HEADER: :tangle no
    #+begin_src elisp
      (org-enforce-todo-dependencies . t)
    #+end_src

**** Todoの種類
     Todoは複数種類作ってあり、リストから自動的に生成されます。

     リストの中で ~_DELIMITER_~ のみは特別な記号として扱われ、
     ~|~ (TODOとDONEを分けるやつ)に変換されます。(直接書けないため)
***** タスク管理用TODO
      #+NAME: Org-todoKeywords-list-todo
      + TODO
      + SOMEDAY
      + WAITING
      + _DELIMITER_
      + DONE
      + OutOfDate

      リストの内容はStringのListとして渡される
      
***** リーディングリスト
      #+NAME: Org-todoKeywords-list-reading
      + ReadLater(a!)
      + Reading(i!)
      + _DELIMITER_
      + Read(d!)

***** 買い物リスト
      #+NAME: Org-todoKeywords-list-shopping
      + ToBuy
      + _DELIMITER_
      + Bought(!)
	
***** ノート・知識ベースの状態管理
      更新が必要なのか、それとも最新なのか
      必要なタグって何だろうか？
      Wikiにあるようなシステムを想定している。
      
      #+NAME: Org-todoKeywords-list-noteStatus
      + Outofdate
      + Accuracy
      + WIP
      + _DELIMITER_
      + Clean
	
***** 設定

      #+HEADER: :var todo=Org-todoKeywords-list-todo
      #+HEADER: :var reading=Org-todoKeywords-list-reading
      #+HEADER: :var shoppingList=Org-todoKeywords-list-shopping
      #+HEADER: :var noteStatus=Org-todoKeywords-list-noteStatus
      #+NAME: leaf-org-todo-keywords-construct
      #+begin_src elisp :tangle no

	(defun replaceDelimiter (target-list)
	  (seq-map (lambda (a) (if (string= (car a) "_DELIMITER_")
				   "|" (car a)))
		   target-list))

        (seq-map (lambda (x) `(sequence ,@(replaceDelimiter x)))
             (list todo reading shoppingList noteStatus))
      #+end_src

*** 外部Link
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    #+NAME: leaf-org-external-link--list
    | github    | https://github.com/%s                  |
    | youtube   | https://youtube.com/watch?v=%s         |
    | wikipedia | https://en.wikipedia.org/wiki/%s       |
    | archw     | https://wiki.archlinux.jp/index.php/%s |

    #+NAME: leaf-org-external-link--get-list
    #+begin_src elisp :var links=leaf-org-external-link--list :results raw :tangle no
      (seq-map '(lambda (link) `(,(elt link 0) . ,(elt link 1))) links)
    #+end_src


**** Ghq対応

     ghq:Cj-bc/dotfiles みたいなリンクを貼れるようにする。
     
     #+HEADER:  :noweb-ref leaf-org-config
     #+begin_src elisp
       (leaf org-ghq :require t)
     #+end_src
     
***** TODO Projectile連携する
     現在はDiredが開くけど、多分Projectileと連携させた方が良くなりそう

***** TODO 補完を有効にする
*** 出力設定
    :PROPERTIES:
    :header-args: :tangle no
    :END:
**** LaTeX
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     [[https://qiita.com/kawabata@github/items/1b56ec8284942ff2646b][org-mode で日本語LaTeXを出力する方法 @kawabata@github]]を参考に。

     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       (setq TeX-engine 'luatex)
     #+end_src

	 
     #+HEADER: :noweb-ref leaf-org-config
     #+begin_src elisp
       ;; TODO: 依存を減らす
       ;; caseが使いたいだけなので自作したい。
       (require 'cl)


       (defun remove-org-newlines-at-cjk-text (&optional _mode)
         "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
         (interactive)
         (goto-char (point-min))
         (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
           (if (and (> (string-to-char (match-string 2)) #x2000)
                    (> (string-to-char (match-string 3)) #x2000))
               (replace-match "\\1\\2\\3"))
           (goto-char (point-at-bol))))

       (with-eval-after-load "ox"
         (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))

	 )
       (setq org-latex-classes
                `(("article"
                   "\\documentclass{ltjsarticle}\n\\usepackage{amsmath}\n"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                  ("report"
                   "\\documentclass{ltjsarticle}\n"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                  ("book"
                   "\\documentclass{ltjsarticle}\n"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                  ("beamer"
                   ,(concat
                     "\\documentclass[compress,dvipdfmx]{beamer}\n"
                     "\\usetheme{AnnArbor}\n"
                     "\\setbeamertemplate{navigation symbols}{}\n"
                     "[NO-PACKAGES]\n"
                     "\\usepackage{graphicx}\n")
                   org-beamer-sectioning)))


       (setq org-latex-packages-alist '(("whole" "bxcjkjatype") ("a4paper" "geometry")))

       (setq org-latex-pdf-process '("latexmk -pdf -pvc -shell-escape -pdflatex=lualatex -output-directory=%o %f"))
     #+end_src

     #+RESULTS:
     | whole   | bxcjkjatype |
     | a4paper | geometry    |
**** LaTeX(texwiki.texjp.org準拠)
ちょっとよく分からなくなり、

#+begin_src elisp
  (leaf org-config/latex
    :ensure nil
    :config
    (setq TeX-engine 'platex)
    (add-to-list 'org-latex-classes
                 '("vrsj" "\\documentclass[a4paper]{jarticle}
         [NO-DEFAULT-PACKAGES]
         [NO-PACKAGES]
         \\usepackage{vrsjj}
         \\usepackage{balance}
         \\special{pdf: pagesize width 210truemm height 297truemm}
         \\newcounter{vrsjyear}
         \\newcounter{vrsjmonth}
         \\newcounter{vrsjnum}
         \\setcounter{vrsjyear}{2023}
         \\setcounter{vrsjmonth}{9}
         \\setcounter{vrsjnum}{\\value{vrsjyear}}
         \\addtocounter{vrsjnum}{-1995}

         \\renewcommand{\\baselinestretch}{1.32}
         "
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ))
    (setq org-latex-compiler "platex")
    (setq org-latex-pdf-process
          '("platex %b" "dvipdfmx %b"))

    )
#+end_src

#+RESULTS:
: org-config/latex

*** captureテンプレート
    :LOGBOOK:
    CLOCK: [2021-07-05 Mon 12:34]--[2021-07-05 Mon 12:34] =>  0:00
    :END:
    #+HEADER: :tangle no :noweb-ref leaf-org-custom
    #+begin_src elisp
      `(org-capture-templates .
                             '(("d" "default" plain
                                (file "capture.org")
                                "")
                               ("b" "blog posts")
                               ("bp" "normal post" plain
                                (function blog-visit-new-post)
                                (file "~/.emacs.d/templates/org-capture/blog")
                                :clock-in t
                                :clock-resume t
                                )
                               ("bd" "dialy post" plain
                                (function blog-visit-new-diary)
                                (file "~/.emacs.d/templates/org-capture/blog-diary")
                                )
                               ("d" "diary")
                               ("dm" "Memo" entry
                                (function ,(apply-partially 'org-diary-visit-today "Memo"))
                                )
                               ))
    #+end_src
*** Org babel
    :PROPERTIES:
    :header-args: :tangle no
    :END:
    #+HEADER: :noweb-ref leaf-org-config
    #+begin_src elisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((awk . t)
	 (shell . t)
	 (haskell . t)
	 ))
    #+end_src
*** Org roamでメモ管理
    :PROPERTIES:
    :header-args: :tangle no
    :END:
    [[https://www.orgroam.com/][org roam]]は、

    #+HEADER: :noweb-ref leaf-org-config :noweb yes
    #+begin_src elisp
      (leaf org-roam
        :emacs>= 26.1
        :ensure t
        :pre-setq
        (org-roam-v2-ack . t)
        :custom
        `(org-roam-directory . ,(file-truename "~/Dropbox/roam"))
        (org-roam-link-auto-replace . t)
        (org-roam-graph-viewer . "qutebrowser")
        (org-roam-completion-everywhere . t)
        <<leaf-org-roam-custom>>
        :config
        <<leaf-org-roam-config>>
        (org-roam-db-autosync-mode)
        )
    #+end_src


    #+begin_src elisp
      (leaf org-roam-evil-key
        :after org-roam evil
        :config
        (evil-define-key 'normal 'global (kbd "SPC r d") 'org-roam-dailies-goto-today)
        (evil-define-key 'normal 'global (kbd "SPC r s") 'org-roam-node-find)
        (evil-define-key 'visual 'org-roam-mode-map (kbd "RET") 'org-roam-node-insert)
        (evil-define-key 'visual 'org-roam-mode-map (kbd "<S-return>") 'cjbc-org-roam-insert-immediate-private)
        (evil-define-key 'normal 'org-roam-mode-map (kbd "SPC r l") 'org-roam-buffer-toggle)
        )
    #+end_src


**** TODO COMMENT テンプレート

     ~DIR~ を設定したいことが多々あるので、 ~#+title~ ではなくエントリにしてほしい。

     #+HEADER: :tangle no :noweb-ref leaf-org-roam-custom
     #+begin_src elisp
       (org-roam-capture-templates .
                                   '(("o" "object" plain
                                      "%?"
                                      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :object:" ("${title}"))
                                       :unnarrowed t)
                                   ("p" "person" plain
                                      "%?"
                                      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :person:" ("${title}"))
                                       :unnarrowed t)
                                   ("r" "reference" plain
                                      "%?"
                                      :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :reference:" ("${title}"))
                                       :unnarrowed t)
                                   ("i" "idea" plain
                                    "%?"
                                    :target (file+olp "%<%Y%m%d%H%M%S>-${slug}.org" ("${title}"))
                                    :unnarrowed t)
                                   ("m" "MOC" plain
                                    "%?"
                                    :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS: :MOC:" ("MOC ${title}"))
                                    :unnarrowed t)
                                   ))
     #+end_src

     
**** TODO タグの一覧を作る
     今だと似ているタグが複数出来てしまったりしてると思うので。

     + 🔖 :: 視聴した資料や、動画などへのメモ
     + 💡 :: アイデア等
     + 🎬 :: 動画の内容
       
**** 表示用テンプレート
help:org-roam-node-display-template を設定すると、 help:org-roam-node-find の際の表示を
カスタマイズ出来る。

タグをアイコンで表示したいので、org-roam-nodeのmethodを追加している。
この方法については help:org-roam-node-display-template について詳しく書かれている。

#+begin_src elisp
  (leaf org-roam-display-template
    :ensure nil
    :config
    (defvar org-roam-tag-icons #s(hash-table test equal data ("note" "📖" "reference" "🔗")))
    (cl-defmethod org-roam-node-icon-tags ((node org-roam-node))
      (seq-reduce
       '(lambda (a b) (let ((icon (or (gethash b org-roam-tag-icons) b)))
                        (if (string-equal a "") icon (concat a "/" icon))))
       (org-roam-node-tags node) ""))
    (setq org-roam-node-display-template "${icon-tags: 20} | ${title:*} ${tags}"))
#+end_src
**** Privete roamを作成するためのラッパー

     Roamには、プライベートなノードをgpg保護された状態で保存する機能がある。
     ただ、そのためには ~org-roam-encrypt-files~ を手動で変えなきゃいけなくて面倒だたので、
     関数にした。

     #+noweb-ref: leaf-org-roam-config
     #+begin_src elisp
       (defun cjbc-org-roam-private (&optional initial-prompt completions filter-fn no-confirm) 
	 "Small wrapper of 'org-roam-find-file' that will create new post with private(encrypted)"
	 (interactive)
	 (setq-local org-roam-encrypt-files--old-value org-roam-encrypt-files)
	 (setq org-roam-encrypt-files t)
	 (org-roam-capture)
	 (setq org-roam-encrypt-files org-roam-encrypt-files--old-value)
	 )
     #+end_src

     #+noweb-ref: leaf-org-roam-config
     #+begin_src elisp
       (defun cjbc-org-roam-insert-immediate-private (&optional initial-prompt completions filter-fn no-confirm)
	   "Small wrapper of 'org-roam-insert-immediate' to insert new encrypted post"
	 (interactive)
	 (setq-local org-roam-encrypt-files--old-value org-roam-encrypt-files)
	 (setq org-roam-encrypt-files t)
	 (org-roam-insert-immediate)
	 (setq org-roam-encrypt-files org-roam-encrypt-files--old-value)
	 )
     #+end_src
**** org-roam-ui

     #+begin_src elisp
       (leaf org-roam-ui
	 :ensure t
	 :after org-roam
	 )
     #+end_src

*** org pomodoro
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    今手元にオーディオプレイヤー入れてなかったので
    一旦 ~org-pomodoro-play-sounds~ はオフに。
    
    #+HEADER: :noweb-ref leaf-org-config
    #+begin_src elisp
      (leaf org-pomodoro
	    :req "alert-0.5.10" "cl-lib-0.5"
	    :ensure t
	    :after alert
	    :custom (org-pomodoro-play-sounds . nil)
	    :hook
	    (org-pomodoro-finished-hook
	     . (lambda () (start-process "org-pomodoro-finished-notification" nil
					 "dunstify" "--appname" "Emacs.org-pomodoro"
					 "Pomodoro finished! Start break time...")))
	    (org-pomodoro-break-finished-hook
	     . (lambda () (start-process "org-pomodoro-break-finished-notification" nil
					 "dunstify" "--appname" "Emacs.org-pomodoro"
					 "Pomodoro break is over!")))
	    )
    #+end_src

*** TODO Org timeline -- Agendaでタイムライン表示する
    #+begin_src elisp :tangle no
      (leaf org-timeline
        :ensure t
        :hook
        (org-agenda-finalize-hook . (lambda () (org-timeline-insert-timeline)))
        )
    #+end_src

*** 見た目

#+begin_src elisp
  (leaf org-modern
    :ensure t)
#+end_src
*** 通知を出す

#+begin_src elisp
  (leaf org-notifications
    :ensure t
    :after org
    :config
    (org-notifications-start)
    )
#+end_src

*** Org attach screenshot

#+begin_src elisp
  (leaf org-attach-screenshot
    :after org
    :ensure nil
    :require t)
#+end_src

*** imenuでより深い階層まで表示する
デフォルトでは、2階層までしか表示されない。
私はもっと深い階層まで表示してほしいので、適当に大きめな数字を設定している。

#+HEADER: :noweb-ref leaf-org-config :tangle no
#+begin_src elisp
  (setq org-imenu-depth 10)
#+end_src

help:org-imenu-depth

** SNS
*** Twittering-mode
    ツイッターやろうぜ!!お前ボールな!!
    #+begin_src elisp
      (leaf twittering-mode :ensure t)
    #+end_src
*** newsticker
    RSSフィード閲覧用

    #+NAME: 購読中のフィード
    + [[https://www.moguravr.com/feed][Mogura VR]]
    + [[https://news.yahoo.co.jp/rss/topics/top-picks.xml][Yahoo Top picks]]
    + [[https://news.yahoo.co.jp/rss/topics/domestic.xml][Yahoo Japan]]
    
    #+begin_src elisp :tangle no
      (defun parse-feed-link (feed-link)
      "Parse Feed link formatted in Org's link"
       (let ((retrive-link-and-name-regex "\\[\\[\\([^]]+\\)\\]\\[\\([^]]+\\)\\]\\]"))
	 ((string-match retrieve-link-and-name-regex feed-link)
	  ((match-string 2 feed-link) . (match-string 1 feed-link))
	  )
	 )
       )


      (parse-feed-link "[[hoge][aaa]]")
    #+end_src


    
    #+begin_src elisp
      (leaf newsticker
	  :doc "A Newsticker for Emacs."
	  :tag "builtin"
	  :added "2021-05-20"
	  :hook (newsticker-mode-hook . (lambda () (toggle-truncate-lines -1)))
	  :custom
	  (newsticker-url-list . '(("Mogura VR" "https://www.moguravr.com/feed" nil nil nil)
				   ("Yahoo top picks" "https://news.yahoo.co.jp/rss/topics/top-picks.xml"
				    nil nil nil)
				   ("Yahoo japan" "https://news.yahoo.co.jp/rss/topics/domestic.xml"
				    nil nil nil)
				   ))
	  )
    #+end_src

** Evil
   これがあるから引っ越せた。
   #+begin_src elisp
     (leaf evil :ensure t
	:require t
	:config
	(evil-mode)
	(evil-define-key 'insert 'global (kbd "C-x C-o") 'completion-at-point)

	(leaf evil-org :ensure t
	  :hook
	  (org-mode-hook . evil-org-mode)
	  (org-agenda-mode-hook . evil-org-mode)

	  :config
	  (require 'evil-org-agenda)
	  (evil-org-agenda-set-keys)
	  (evil-define-key 'normal 'global (kbd "C-w C-v") 'evil-window-vnew)
	  )
	(leaf evil-surround :ensure t
	  :after 'evil-core
	  :config
	  (evil-surround-mode)
	  (evil-define-key 'visual 'global "sd" 'evil-surround-delete)
	  (evil-define-key 'visual 'global "sa" 'evil-surround-region)
	  (evil-define-key 'visual 'global "sr" 'evil-surround-change)
	)
	(leaf evil-numbers :ensure t
	  :after 'evil-core
	  )
	)
   #+end_src

*** TODO 分解する
*** TODO DocViewでも使えるようにする
    多分書くor拾ってくる
*** textobjects
    #+begin_src elisp
      (leaf evil-textobj-parameter
	    :el-get Cj-bc/evil-textobj-parameter
	    :require t
	    :config
	    (define-key evil-inner-text-objects-map "," 'evil-textobj-parameter-inner-parameter)
	    (define-key evil-outer-text-objects-map "," 'evil-textobj-parameter-outer-parameter)
	    )
    #+end_src
**** a defun

#+begin_src elisp
  (leaf evil-textobj-defun
    :require nil
    :config
    (evil-define-text-object evil-a-defun (count &optional beg end type)
      "Select a defun expression."
      :extend-selection t
      (evil-select-an-object 'evil-defun beg end type count))
    (define-key evil-outer-text-objects-map "d" 'evil-a-defun)
    )
#+end_src
**** Evil surround LaTeX

#+begin_src elisp
  (leaf evil-surround-latex
    :ensure nil
    :after 'evil-surround
    :hook latex-mode-hook)
#+end_src
**** LaTeX textobject

#+begin_src elisp
  (leaf evil-textobj-latex
    :require t
    :ensure nil
    :after 'evil
    )
#+end_src

** Projectile
   #+begin_src elisp :noweb yes 
     (leaf projectile
       :ensure t
       :custom
       (projectile-project-search-path . (list ghq-root))
       (projectile-enable-caching . t)
       (projectile-project-root-files-bottom-up
        . '<<leaf-projectile-project-root-files-bottom-up--list()>>)

       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
       )
   #+end_src


   #+NAME: leaf-projectile-project-root-files-bottom-up--list
   #+HEADER: :var l=leaf-projectile-project-root-files-bottom-up--names
   #+begin_src elisp :results value :tangle no
     (seq-map 'car l)
   #+end_src

*** プロジェクトルートと見做すファイルの一覧

    #+NAME: leaf-projectile-project-root-files-bottom-up--names
    + angular.json
    + stack.yaml
    + .git
    + .projectile
      
** 補完周り
Ivyを使用していた所から徐々に分割していこうとしており、
consultを使うまでもなさそうなものを一時的にここに保存します。

#+begin_src elisp
  (leaf cj-bc/completions
    :require nil
    :ensure nil
    :config
    (fido-vertical-mode)
    )
#+end_src

*** ブックマーク
#+begin_src elisp
  (require 'bookmark)
  (defun cj-bc/completions/bookmark ()
      ""
    (interactive)
    (pcase (completing-read "jump to bookmark: " (bookmark-all-names))
      ('nil nil)
      (bookmark (bookmark-jump bookmark))))

  (global-set-key (kbd "C-x r l") #'cj-bc/completions/bookmark)
#+end_src

*** in-buffer補完する: corfu

#+begin_src elisp
  (leaf corfu
    :ensure t
    :bind
    (:corfu-map
     ("C-p" . corfu-previous)
     ("C-n" . corfu-next))
    :config
    (global-corfu-mode))
#+end_src

**** ミニバッファーでも使用出来るようにする
[[https://github.com/minad/corfu?tab=readme-ov-file#completing-in-the-minibuffer][公式のREADME]]にある例を借りる。

#+begin_src elisp
  (defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer."
  (when (local-variable-p 'completion-at-point-functions)
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
#+end_src
*** marginalia

#+begin_src elisp
  (leaf marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src

** migemo
#+begin_src elisp
  (leaf migemo
    :ensure t
    :require t
    :custom
    (migemo-command . "cmigemo")
    (migemo-options . '("-q" "--emacs"))
    (migemo-coding-system . 'utf-8-unix)
    (migemo-dictionary . "/usr/share/migemo/utf-8/migemo-dict")
    (migemo-user-dictionary . nil)
    (migemo-regex-dictionary . nil)
    :config
    (when (and (processp migemo-process)
               (eq (process-status migemo-process) 'run))
      (migemo-kill))
    (migemo-init)
    )
#+end_src

#+begin_src elisp
  (leaf ivy-migemo
    :after ivy migemo
    :ensure t
    :require t
    :config
    (ivy-migemo-toggle-migemo)
    (setq ivy-re-builders-alist
          (mapcar '(lambda (pair)
                     (list (car pair)
                           (pcase (cdr pair)
                             ('ivy--regex-fuzzy 'ivy-migemo-regex-fuzzy)
                             ('ivy--regex-plus 'ivy-migemo-regex-plus)
                             (x x)))
                     ) ivy-re-builders-alist))
    )
#+end_src

#+begin_src elisp :tangle no
  (leaf avy-migemo
    :after avy migemo
    :require t
    :ensure t)
#+end_src
** 動き
*** Avy
#+begin_src elisp
  (leaf avy
    :ensure t
    ;; :bind
    ;; (evil-normal-state-map ([remap evil-find-char] . evil-avy-goto-char-2))
    :config
    (evil-define-key '(normal motion) 'global "f" 'evil-avy-goto-char-in-line)
    (evil-define-key '(normal) 'global (kbd "M-a") 'avy-goto-char-2)
    )
#+end_src

** Magit
   #+begin_src elisp
     (leaf magit
       :ensure t
       :bind
       ("C-x g" . nil)
       :bind-keymap
       ("C-c g" . '(keymap (?l . magit-log)
                           (?s . magit-status)
                           ))
       )
   #+end_src
** 開発環境
*** ドキュメント作成
	#+begin_src elisp
          (leaf plantuml-mode
            :ensure t
            :custom
            (plantuml-default-exec-mode . 'executable)
            (plantuml-indent-level . 2)
            )

          (leaf ob-plantuml
            :ensure nil
            :require 'ob-plantuml
            :after plantuml-mode org
            :custom
            (org-plantuml-exec-mode . 'plantuml)
            (org-plantuml-jar-path . "/usr/share/java/plantuml/plantuml.jar")
            )
	#+end_src
**** Mermaid
#+begin_src elisp
  (leaf mermaid-ts-mode
    :ensure t
    )
#+end_src

*** Repl
    #+begin_src elisp
      (leaf quickrun
	:doc "Run commands quickly"
	:req "emacs-24.3"
	:tag "emacs>=24.3"
	:added "2022-01-12"
	:url "https://github.com/syohex/emacs-quickrun"
	:emacs>= 24.3
	:ensure t)
    #+end_src
*** 環境の一致

    #+begin_src elisp
      (leaf editorconfig
	:ensure t)
    #+end_src

*** スニペットを使えるようにする: Yasnippet
#+begin_src elisp
  (leaf yasnippet
    :ensure t
    :require t
    :hook (prog-mode-hook . yas-minor-mode)
    :custom `(yas-snippet-dirs . '(,(locate-user-emacs-file "yasnippet")))
    )
#+end_src

*** 新規作成時のテンプレートを入れる: auto-insert-mode & yatemplate
新規作成時のテンプレート挿入自体は help:auto-insert-mode 単体で可能だが、
テンプレートの記述が大分面倒なので [[https://github.com/mineo/yatemplate][mineo/yatemplate]] を使う。

#+begin_src elisp
  (leaf yatemplate
    :ensure t
    :custom
    `(yatemplate-dir . ,(locate-user-emacs-file "templates/yatemplate"))
    :config
    (yatemplate-fill-alist)
    )

  (leaf auto-insert-mode
    :ensure nil
    :config
    (auto-insert-mode 1)
    )
#+end_src

*** Eshell
#+begin_src elisp
  (leaf em-prompt
    :doc "EShellで使われているプロンプトを提供しているパッケージ"
    :ensure nil
    :require nil
    :custom
    (eshell-prompt-function . (lambda () (concat (eshell/basename (eshell/pwd))
                                                 (if (= (user-uid) 0) " # " " $ "))))
    )
#+end_src

*** cMake
#+begin_src elisp
  (leaf cmake-mode
   :ensure t)
#+end_src

*** ファイラー
#+begin_src elisp
  (leaf treemacs
    :ensure t
    :bind
    ("C-c f" . 'treemacs)
    )
#+end_src

*** Emmet
#+begin_src elisp
  (leaf emmet-mode
    :ensure t
    :require t
    :hook
    (html-mode-hook . 'emmet-mode))
#+end_src

*** Nix

#+begin_src elisp
  (leaf nix-mode
    :ensure t)
#+end_src

*** Treesitter

#+begin_src elisp
  (leaf treesit-auto
    :ensure t
    :require t
    :config
    (global-treesit-auto-mode))
#+end_src

** ドキュメント作成
*** SATySFi
#+begin_src elisp
  (leaf satysfi-mode
    :el-get gfngfn/satysfi.el
    :ensure nil
    :require 'satysfi
    :custom
    (satysfi-pdf-viewer-command . "mupdf")
    :config
    (add-to-list 'auto-mode-alist '("\\.saty$" . satysfi-mode))
    (add-to-list 'auto-mode-alist '("\\.satyh$" . satysfi-mode))
    )
#+end_src
*** LaTeX
~latex-mode~ で編集する時のための設定。

#+begin_src elisp
  (leaf latex-config
    :ensure nil
    :custom
    (latex-run-command . "platex")
    (tex-dvi-print-command . "dvipdfmx")
    (tex-bibtex-command . "pbibtex"))
#+end_src

日本語を扱うため、platexを利用する。その他の設定等はまた後日。
~C-c C-f~ でtexからdviファイルを作成、その後 ~C-c C-p~ でpdfファイルが生成される。

** メモ取り・ナレッジベース構築
*** Orgファイル以外でのリンクを構築する
    Orgファイル以外でも、リンク機能が使えると便利
    (e.g. ソースコードのコメントにroamへのリンクを貼るなど)
    なので、Hyperboleを使ってみる
    
**** GNU Hyperbole
#+begin_src elisp
  (leaf hyperbole
    :ensure t
    )
#+end_src
     
*** Wiki

    #+begin_src elisp
      (leaf org-wiki
	:ensure nil
	:custom
	(org-wiki-location-list . '("~/Documents/wiki"))
	(org-wiki-location . (car org-wiki-location-list))

	)
    #+end_src
** 見栄えを良くする
*** rainbow-delimiters
    Lisp系の言語は括弧の対応がとても見辛いので、
    対応する括弧に色を付けてもらう
    
    #+begin_src elisp
	(leaf rainbow-delimiters :ensure t
	  :hook
	  (prog-mode-hook . rainbow-delimiters-mode))
    #+end_src

** プログラミング言語毎の設定
*** Haskell
    #+begin_src elisp
      (leaf haskell-mode :ensure t)
    #+end_src
*** TypeScript
    #+begin_src elisp
      (leaf typescript-mode
	:ensure t
	)
    #+end_src
*** Kotlin
    #+begin_src elisp
      (leaf kotlin-mode
	:ensure t
	)
    #+end_src

    #+begin_src elisp
      (leaf ob-kotlin
	:ensure t
	)
    #+end_src
*** Dockerfile

    #+begin_src elisp
      (leaf dockerfile-mode
	:ensure t
	)
    #+end_src
*** Rust
#+begin_src elisp
  (leaf rust-mode
    :doc "A major-mode for editing Rust source code"
    :req "emacs-25.1"
    :tag "languages" "emacs>=25.1"
    :added "2022-01-20"
    :url "https://github.com/rust-lang/rust-mode"
    :emacs>= 25.1
    :ensure t)
  (leaf cargo-mode
    :doc "Cargo Major Mode. Cargo is the Rust package manager"
    :req "emacs-25.1"
    :tag "tools" "emacs>=25.1"
    :added "2022-01-20"
    :url "https://github.com/ayrat555/cargo-mode"
    :emacs>= 25.1
    :ensure t)
#+end_src
*** Common Lisp
#+begin_src elisp
  (leaf sly
    :ensure t
    :bind
    (:sly-editing-mode-map
     ("M-p" . nil)
     ("M-n" . nil)
     ("C-c M-p" . 'sly-previous-note)
     ("C-c M-n" . 'sly-next-note)
     )
    :custom
    (inferior-lisp-program . '("ros" "run"))
    )
#+end_src
*** Go
#+begin_src elisp
  (leaf go-mode
    :ensure t
    :hook
    (go-mode-hook . (lambda () (setq-local tab-width 2)))
    (go-mode-hook . (lambda () (add-hook 'before-save-hook #'gofmt-before-save nil t))))
#+end_src

#+begin_src elisp
  (leaf go-projectile
    :ensure t
    :require t)
#+end_src
*** lua
#+begin_src elisp
  (leaf lua-mode
    :ensure t)
#+end_src
*** Elisp

#+begin_src elisp
  (leaf elisp-config
    :ensure nil
    :config
    (defun user-config/elisp-config/outline-level ()
      "Custom function for `outline-level'"
      (- (match-end 1) (match-beginning 1)))
    (defun user-config/elisp-config/setup-outline ()
      (setq-local outline-regexp (rx (seq ";;;" (group (* ?\;)) " " (+ (or (syntax word) (syntax whitespace))) ":")))
      (setq-local outline-level 'user-config/elisp-config/outline-level)
      (outline-minor-mode +1))
    (add-hook 'emacs-lisp-mode-hook 'user-config/elisp-config/setup-outline))
#+end_src
** Appearences
   #+begin_src elisp
     (leaf appearences
       :config
       (set-terminal-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8)
       (prefer-coding-system 'utf-8)
       (add-to-list 'default-frame-alist '(font . "Cica-20"))
     )
   #+end_src
   
*** テーマ
    #+begin_src elisp
      (leaf doom-themes
	; :doc "an opinionated pack of modern color-themes"
	; :req "emacs-25.1" "cl-lib-0.5"
	; :tag "faces" "custom themes" "emacs>=25.1"
	; :added "2021-06-21"
	; :url "https://github.com/hlissner/emacs-doom-themes"
	; :emacs>= 25.1
	:ensure t
	:config
	(load-theme 'doom-dracula t)
	)
    #+end_src

** keybinds
   #+begin_src elisp
     (leaf window-movements
	 :doc "vim-like window movement keybinds"
	 :bind
	 (("C-c C-w h" . windmove-left)
	  ("C-c C-w j" . windmove-down)
	  ("C-c C-w k" . windmove-up)
	  ("C-c C-w l" . windmove-right)
	 )
       )
   #+end_src

** configure global modes
   #+begin_src elisp
     (leaf configure-global-modes
       :config
       (column-number-mode)
       (global-display-line-numbers-mode t)
       (setq display-line-numbers-type 'relative)
       (menu-bar-mode 0)
       (tool-bar-mode 0)
       (scroll-bar-mode 0)
       (auto-revert-mode)

       (show-paren-mode)
     )
   #+end_src

   
*** DocView

    基本的には、Evilとの相性や誤キー押下を防ぐための設定
    #+begin_src elisp
      (leaf doc-view
        :doc "Document viewer for Emacs"
        :tag "builtin"
        :added "2021-06-25"
        ;; :custom (doc-view-pdf->png-converter-function . 'doc-view-pdf->png-converter-mupdf)
        :bind (:doc-view-mode-map
               ("k" . doc-view-previous-page)
               ("j" . doc-view-next-page)
               ("w" . nil)
               )
        :hook (doc-view-minor-mode-hook
               . (lambda () (display-line-numbers-mode "Disable")))
        )
    #+end_src


*** Auto-Save mode

#+begin_src elisp
  (leaf auto-save-mode
    :ensure nil
    :custom
    (delete-auto-save-files . t) ;; Delete auto-save file when a true save is done
    )
#+end_src


** custom, etc
   #+begin_src elisp
     (setq custom-file "~/.emacs.d/custom.el")
     ; (load custom-file)

     (provide 'init)
   #+end_src

*** URLハンドラ

#+begin_src elisp
  (leaf cj-bc/config/url-handlers
    :custom
    (browse-url-handlers . '(("\\`file://.*\\.pdf" . browse-url-emacs))))

#+end_src
