set nocompatible

" ================ Generals ================================= {{{
set modeline
set modelines=5
set cursorline
set number
set relativenumber
set concealcursor=n
" set autowriteall  " This is useful when we use QfixHowm, but it's so awful that will save Netrw windows...
syntax on

" Searching options
set ignorecase
set smartcase

set expandtab " replace <tab> with <space>
set tabstop=2 " width <tab> hold (changed in some ft)
set shiftwidth=2 " width auto-indent
	" highlight ZENKAKU-SPACE not to miss them
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/
  " display invisible letter
  "   tab: >>-
set list
set listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%
set foldmethod=marker

" Wildmenu setup
set wildmenu
set wildchar=<TAB>
set wildmode=list:longest
set wildignore+=*.DS_STORE,*.jpg,*.png,*.gif

" Draw the statusline
set laststatus=2

set statusline=[*_*]\ \ \|F:\ %f,\ \|ft:\ %y,\ \|buf:\%n%=%{FugitiveStatusline()}%P

" Vimであいまいな幅の文字の論理幅を1にします。https://qiita.com/kefir_/items/78e64c545a70a0ebea8a
set ambiwidth=single

" :h keymap
set keymap=blocks

" spell

execute 'set spellfile=' . join(globpath($HOME . "/.vim/spell", "*.utf-8.add", v:false, v:true), ",")
set spell
set spelllang=en,cjk,vr,haskell
set spelloptions=camel

" Update spell files by regenerate binaries
function UpdateSpell()
  for s:item in globpath($HOME . "/.vim/spell/", "*.add", v:false, v:true)
    execute "mkspell! " . s:item
  endfor
endfunction

set showcmd

au FileType tweetvim,w3m set nospell
" }}}

" For local syntax files etc
set runtimepath+=./vim_mod

" ================ file types ================================= {{{

au BufNewFile,BufRead *.md    setf pandoc
au BufNewFile,BufRead *.json %!jq

  " iskeyword define which letter is included as word
au BufNewFile,BufRead *.sh          set iskeyword=.,@,48-57,_,192-255
au BufNewFile,BufRead *.bats        set dictionary=$HOME/.vim/dictionary/bats.dict
au BufNewFile,BufRead .editorconfig set dictionary=$HOME/.vim/dictionary/editorconfig.dict
au BufNewFile,BufRead CHANGELOG*    set dictionary=$HOME/.vim/dictionary/CHANGELOG.dict

" --- templates
au BufNewFile *.dia        0r $HOME/.vim/template/diary.txt
au BufNewFile pack.mcmeta  0r $HOME/.vim/template/pack.mcmeta
au BufNewFile *.bats       0r $HOME/.vim/template/bats.bats
au BufNewFile *.oo.sh      0r $HOME/.vim/template/bash-oo-framework.sh
au BufNewFile *.sh         0r $HOME/.vim/template/shell.sh
au BufNewFile CHANGELOG.md 0r $HOME/.vim/template/CHANGELOG

" --- Lang specific settings
au FileType haskell set tabstop=4
au FileType cs      set tabstop=4


" tell vim that .sh is bash script by default
let g:is_bash = 1

" folding options
" Enable some foldings
let g:sh_fold_enabled=7
let g:vimsyn_folding ='af'


" }}}

" ================== Key binds ============================== {{{
" set SPACEKEY to <leader> {{{2
nnoremap <space> <nop>
xnoremap <space> <nop>
let mapleader = " "
" }}}

	" jj to exit insert-mode
inoremap <silent> jj <ESC> 
inoremap <silent> jk <ESC> 
	" <C-o><C-o> to print time in normal-mode
inoremap <C-o><C-o> <C-r>=strftime('(%T %p)') <LF>
	" <C-o>d to print data in normal-mode
nnoremap <C-o>d <ESC>i<C-r>=strftime('< %F >')<LF><LF>
	" Reload .vimrc by pushing <C-o>i
nnoremap <C-o>i <ESC>:source ~/.vim/vimrc<LF><LF>

	" Automatically insert the pair
inoremap [ []<left>
inoremap ( ()<left>
inoremap { {}<left>
inoremap " ""<left>

" " moving around buffers
" " bn : go to next buffer
" " bp : go to previous buffer
" " bb : go to previously edited buffer
" nnoremap <silent> bn <ESC>:bnext<LF>
" nnoremap <silent> bp <ESC>:bprevious<LF>
" nnoremap <silent> bb <ESC>:b #<LF>



" show hint for <C-x> completion {{{2
  " dictionary of input key
  let s:compl_key_dict = {
    \ char2nr("\<C-l>"): "\<C-x>\<C-l>",
    \ char2nr("\<C-n>"): "\<C-x>\<C-n>",
    \ char2nr("\<C-p>"): "\<C-x>\<C-p>",
    \ char2nr("\<C-k>"): "\<C-x>\<C-k>",
    \ char2nr("\<C-t>"): "\<C-x>\<C-t>",
    \ char2nr("\<C-i>"): "\<C-x>\<C-i>",
    \ char2nr("\<C-]>"): "\<C-x>\<C-]>",
    \ char2nr("\<C-f>"): "\<C-x>\<C-f>",
    \ char2nr("\<C-d>"): "\<C-x>\<C-d>",
    \ char2nr("\<C-v>"): "\<C-x>\<C-v>",
    \ char2nr("\<C-u>"): "\<C-x>\<C-u>",
    \ char2nr("\<C-o>"): "\<C-x>\<C-o>",
    \ char2nr('s'): "\<C-x>s",
    \ char2nr("\<C-s>"): "\<C-x>s"
    \ }

  " display message
  let s:hint_i_ctrl_x_msg = join([
    \ '<C-l>: while lines',
    \ '<C-n>: keywords in the current file',
    \ "<C-k>: keywords in 'dictionary'",
    \ "<C-t>: keywords in 'thesaurus'",
    \ '<C-i>: keywords in the current and included files',
    \ '<C-]>: tags',
    \ '<C-f>: file names',
    \ '<C-d>: difinitions or macros',
    \ '<C-v>: Vim command-line',
    \ "<C-u>: User defined completion ('completefunc')",
    \ "<C-o>: omni completion ('omnifunc')",
    \"s: Spelling suggestions ('spell')"
    \],"\n")

  function! s:hint_i_ctrl_x() abort
    echo s:hint_i_ctrl_x_msg
    let c = getchar()
    return get(s:compl_key_dict, c, nr2char(c))
  endfunction

  inoremap <expr> <C-x> <SID>hint_i_ctrl_x()
" }}}

" move phisical line even when cursor is on in long line {{{2
" If there's long and wrapped lines, then j and k behave unnaturally. This
" mapping makes movements operate on 1 screen line in wrap mode.
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement('j')
onoremap <silent> <expr> k ScreenMovement('k')
onoremap <silent> <expr> 0 ScreenMovement('0')
onoremap <silent> <expr> ^ ScreenMovement('^')
onoremap <silent> <expr> $ ScreenMovement('$')
nnoremap <silent> <expr> j ScreenMovement('j')
nnoremap <silent> <expr> k ScreenMovement('k')
nnoremap <silent> <expr> 0 ScreenMovement('0')
nnoremap <silent> <expr> ^ ScreenMovement('^')
nnoremap <silent> <expr> $ ScreenMovement('$')
" }}}

"  DOESN'T WORK AT THIS TIME {{{2
"  " toggle logging mode. In this mode, date will be inserted for each line
"function! s:toggle_logging_mode()
"  if b:Cj_bc_logging_mode == v:false
"    echo "--Logging mode--"
"    inoremap <CR> <CR><C-r>=strftime('(%T %p)') <LF> 
"    nnoremap o $a<CR><C-r>=strftime('(%T %p)') <LF> 
"    let b:Cj_bc_logging_mode = v:true
"  else
"    echo "--Quite Logging mode--"
"    iunmap <CR>
"    nunmap o
"    let b:Cj_bc_logging_mode = v:false
"  endif
"endfunction
"
"nmap <silent>Lg <SID>toggle_logging_mode()
" }}}

" key bind for vim-codereview
nnoremap ,cc <ESC>:CodeReviewCommentChange <LF>
nnoremap ,ch <ESC>:CodeReviewComment <LF>
nnoremap ,cr <ESC>:CodeReviewReloadComments <LF>

" key binds for operator mappings 
nnoremap <silent>sa <Plug>(operator-surround-append)
nnoremap <silent>sd <Plug>(operator-surround-delete)
nnoremap <silent>sr <Plug>(operator-surround-replace)
" }}}

" ================== for default plugins ============================== {{{

" ------- netrw
" usage:
"   i --- change view mode
"   v --- open file on the side
"   o --- open file up to the newtw
let g:netrw_liststyle = 3 " force tree view (can be toggled by 'i' button)
let g:netrw_altv = 1 " open files on the right side when 'v' is pushed
let g:netrw_banner = 0 " Turn off netrw banner to hide full path

" ------ UML view in chrome
au FileType plantuml command! OpenUML :!open -a % 
au BufRead *.uml command! OpenUML :!open -a % 

" ------ fzf in vim (if exists)
if isdirectory('/usr/local/opt/fzf')
  set rtp+=/usr/local/opt/fzf
endif

if executable('misskey-cli')
  nnoremap mss :MisskeyCommandSay<CR>
  nnoremap msc :MisskeySay<CR>
endif
" }}}

" ========== Installing plugins ========== {{{
" installs all plugins listed in plug.min and plug.full
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  Plugin 'VundleVim/Vundle.vim'
  " get plugin list from plug.min and plug.full
  Plugin 'kana/vim-textobj-user' " base plugin for textobjects
  Plugin 'kana/vim-operator-user' " base plugin for vim operators
  Plugin 'rhysd/vim-operator-surround' " Vim operator mapping to enclose text objects with surrounds like paren, quote and so on.
  Plugin 'junkblocker/patchreview-vim' " dependency of vim-codereview
  Plugin 'codegram/vim-codereview'  " code reviewer for Github's Pull-Request
  Plugin 'editorconfig/editorconfig-vim' " EditorConfig plugin for Vim
  Plugin 'Shougo/unite.vim' " unite.vim -- a breaking User Interface
  Plugin 'tpope/vim-fugitive' " A Git wrapper so awesome, it should be illegal
  Plugin 'w0rp/ale' " Asynchronous Lint Engine
  Plugin 'othree/yajs.vim' " YAJS.vim: Yet Another JavaScript Syntax for Vim
  Plugin 'othree/es.next.syntax.vim' " ES.Next syntax for Vim
  Plugin 'dbeniamine/cheat.sh-vim' " A vim plugin to access cheat.sh sheets
  Plugin 'vim-scripts/VOoM'
  if has("python3")
    Plugin 'jceb/vim-orgmode'
    Plugin 'SirVer/ultisnips' " UltiSnips - The ultimate snippet solution for Vim. Send pull requests to SirVer/ultisnips!
  endif
  Plugin 'thinca/vim-quickrun' " Run commands quickly.
  Plugin 'Cj-bc/gfm.vim' " syntax file for Github flavor markdown
  Plugin 'wellle/targets.vim' " vim plugin that provides additional tect objects
  Plugin 'vim-jp/vimdoc-ja' " japanese doc
  Plugin 'sgur/vim-textobj-parameter' " provide textobject for '.*,'
  Plugin 'cespare/vim-toml' " Vim syntax for TOML
  Plugin 'junegunn/fzf'
  Plugin 'junegunn/fzf.vim' " fzf :love: vim
  Plugin 'junegunn/goyo.vim' " :Tulip: Distraction-free writing in Vim
  Plugin 'airblade/vim-gitgutter' " A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
  Plugin 'mileszs/ack.vim' " Vim plugin for the Perl module / CLI script 'ack'  -- but I'll use this with 'ag'
  Plugin 'altercation/vim-colors-solarized' " precision colorscheme for the vim text editor
  Plugin 'hspec/hspec.vim' " Vim plugin providing support for the Hspec BDD-style testing framework for Haskell.
  Plugin 'tyru/skkdict.vim' " Syntax file for SKK directory
  Plugin 'OmniSharp/omnisharp-vim' " Vim omnicompletion (intellisense) and more for c#
  Plugin 'vim-pandoc/vim-pandoc-syntax'
  Plugin 'vim-pandoc/vim-pandoc'
  Plugin 'pbrisbin/vim-syntax-shakespeare' " A set of vim syntax files for highlighting the various Html templating languages in Haskell
  Plugin 'skanehira/code2img.vim' " generate image of source code
  Plugin 'tyru/open-browser.vim' " dependency of TweetVim
  Plugin 'basyura/twiBill.vim'  " dependency of TweetVim
  Plugin 'mattn/webapi-vim'  " send http request from vim
  Plugin 'basyura/TweetVim'
  Plugin 'yomi322/unite-tweetvim' " More unite source for Tweetvim
  Plugin 'mattn/emoji-vim' " type Emoji in Vim!!
  Plugin 'Shougo/vimproc.vim' " optionally dependency of github-complete.vim
  Plugin 'rhysd/github-complete.vim' " complete github's username, repository name, etc
  Plugin 'jaxbot/github-issues.vim' " deal with github issues
  Plugin 'itchyny/calendar.vim' " view calender from vim
  Plugin 'itchyny/screensaver.vim' " screen saver
  Plugin 'scrooloose/vim-slumlord' " Inline previews for Plantuml sequence diagrams
  Plugin 'kannokanno/previm' " previewer for markdown in browser
  Plugin 'VincentCordobes/vim-translate' " Translater in Vim (require: translate-shell)
  Plugin 'vimwiki/vimwiki' " Personal Wiki for Vim
  Plugin 'majutsushi/tagbar' " show tag list on the side
  Plugin 'mattn/qiita-vim' " vim qiita client
  Plugin 'mattn/emmet-vim' " HTML/CSS coding
  Plugin 'tell-k/vim-browsereload-mac' " vim plugin to reflesh your browser. for MacOSX
  Plugin 'vim-scripts/DrawIt' " Ascii drawing plugin: lines, ellipses, arrows, fills, and more!
  Plugin 'gyim/vim-boxdraw' " An ASCII box drawing plugin for Vim
  " Plugin 'rishihahs/vim-youtube' " Plays youtube in (neo)vim
  Plugin 'Cj-bc/blib.vim' " blib integration
  Plugin 'Cj-bc/Damian-Conway-s-Vim-Setup' " Damian's vim plugins
  Plugin 'kana/vim-vspec' " Vim plugin: Testing framework for Vim script
  Plugin 'dermusikman/sonicpi.vim' " Sonic Pi plugin for Vim
  Plugin 'prabirshrestha/async.vim' " dependency of vim-lsp
  Plugin 'prabirshrestha/vim-lsp' " async language server protocol plugin for vim and neovim
  Plugin 'mattn/vim-lsp-settings'
  Plugin 'Cj-bc/drcs.vim'
  Plugin 'mattn/vim-reading-vimrc' " vimrc reading client
  Plugin 'rhysd/vim-grammarous' " A powerful grammar checker for vim using LanguageTool.
  Plugin 'ElmCast/elm-vim' " Elm plugin for Vim
  Plugin 'Cj-bc/cmus.vim' " Control cmus from vim
  Plugin 'mhinz/vim-startify' " The fancy start screen for Vim
  Plugin 'freitass/todo.txt-vim' " vim plugin for todo.txt
  Plugin 'vim-scripts/bats.vim' " just a hilight for Bats
  Plugin 'aklt/plantuml-syntax' " syntax file for Plant UML
  Plugin 'fuenor/qfixhowm' " vim client for Howm
  Plugin 'Cj-bc/bashinfinity.vim'
  Plugin 'Cj-bc/applescript.vim'
  Plugin 'ballerina-attic/plugin-vim' " ballerina syntax file
  Plugin 'antew/vim-elm-language-server'
  Plugin 'vim-scripts/utl.vim'
  Plugin 'tpope/vim-speeddating' " In/De-crease dates. **tpope/speeddating is renamed to this**
  Plugin 'inkarkat/vim-SyntaxRange' " Define a different filetype syntax on regions of a buffer.
  Plugin 'tyru/eskk.vim'
  Plugin 'junegunn/vim-easy-align'
  "Plugin 'Cj-bc/faclig.vim'

call vundle#end()
filetype plugin indent on
" }}}

" Source from mattn
call map(sort(split(globpath(&runtimepath, 'vimrcs/*.vim'))), {-> [execute('exec "so" v:val')]})

let g:blog_dir="$HOME/ghq/github.com/Cj-bc/blog/posts"

" =================== Reference URLs =========================================
" ==                                                                        ==
" == http://vimblog.hatenablog.com/entry/vimrc_key_mapping                  ==
" ==      -> difference between key-bind commands                           ==
" == http://d.hatena.ne.jp/hyuki/20130714/vim                               ==
" ==      -> time-insert key-bind                                           ==
" == https://qiita.com/annyamonnya/items/97c5cb0cfa414b3592d7               ==
" ==      -> Cheat sheet of strftime() function                             ==
" == https://qiita.com/_snow_narcissus/items/f1633ecc40814acca4cf           ==
" ==      -> Automatically insert the pair                                  ==
" == http://vimblog.hatenablog.com/entry/vimrc_set_tab_indent_options       ==
" == 	    -> settings related with <tab>				                            ==
" == http://blog.tojiru.net/article/234400966.html                          ==
" ==      -> settings of netrw config                                       ==
" == http://blog.remora.cx/2011/08/display-invisible-characters-on-vim.html ==
" ==      -> visible unvisible letters (set list)                           ==
" == http://koturn.hatenablog.com/entry/2018/02/10/170000                   ==
" ==      -> display hint of <C-x>                                          ==
" == http://d.hatena.ne.jp/osyo-manga/20140307/1394204974                   ==
" ==      -> documents for textobj and operators                            ==
" == http://ivxi.hatenablog.com/entry/2013/05/23/163825                     ==
" ==      -> key mapping for buffers                                         ==
" == https://qiita.com/kojionilk/items/67379e68cf54d811081a                 ==
" ==      -> Searching options                                              ==
" == https://github.com/rouxbuciu/dotfiles .vimrc                           ==
" ==      -> wildmenu, relativenumber, laststatus                           ==
" == https://qiita.com/kefir_/items/78e64c545a70a0ebea8a                    ==
" ==      -> DRCS settings                                                  ==
" ==     		http://vim-jp.org                                               ==
" ==               VIM Japanese community site                              ==
" ==                                                                        ==
" ==          https://gitter.im/vim-jp/reading-vimrc                        ==
" ==               .vimrc Reading Community chat                            ==
" ============================================================================
