" -------------- fugitive
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>

""  I wanted to make a function that push git commits
"" to remote automatically if HEAD is forward
"" when vim is about to finished.
""
"" Todo:
""   - Find the way to detect online status
""   - Find the way to know whether it should push some refs
"
" func! s:fugitive_auto_push()
"   
" endfunc
" au VimLeavePre * call s:fugitive_auto_push()

" -------------- for vim-operator-surround
xmap <silent>sa <Plug>(operator-surround-append)
nmap <silent>sa <Plug>(operator-surround-append)
xmap <silent>sd <Plug>(operator-surround-delete)
nmap <silent>sd <Plug>(operator-surround-delete)
xmap <silent>sr <Plug>(operator-surround-replace)
nmap <silent>sr <Plug>(operator-surround-replace)
let g:operator#surround#blocks = {
  \ '-' : [
  \   {'block': ['{{{', '}}}'], 'motionwise': ['line', 'block'], 'keys': ['f']},
  \   ],
  \ 'haskell' : [
  \   {'block': ['-- {{{', '}}}'], 'motionwise': ['line', 'block'], 'keys': ['f']},
  \   ],
  \ 'markdown' : [
  \   {'block': ['```', '```'], 'motionwise': ['line'], 'keys': ['```']},
  \   ],
  \ 'markdown.vimwiki.qfix_memo' : [
  \   {'block': ['```', '```'], 'motionwise': ['line'], 'keys': ['```']},
  \   ],
  \ }


" -------------- for ale
"  I'll use vim-lsp for LSP client, so I disable this.
" let g:ale_cpp_gcc_executable = 'g++'
" let g:ale_cpp_gcc_options = '-std=c++17 -Wall'
let g:ale_cpp_clang_options = '-std=c++17 -Wall'
let g:ale_cpp_ccls_eecutable = ''
let g:ale_linters = {
    \ 'sh': ['language_server'],
    \ 'cpp': ['ccls'],
    \ 'python': ['pyls', 'mypy', 'flake8'],
    \ 'haskell': ['stack-ghc', 'hie'],
    \ }
"    \ 'elm': ['elm-language-server'],
"
let g:ale_linters_ignore = { 'elm': ['make'] } " Avoid conflicts with elm-ls
let g:ale_elm_ls_use_global = 1 " Use globally installed elm-ls

" -------------- UltiSnippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME . '/.vim/customSnippets', 'customSnippets', 'UltiSnips']
let g:UltiSnipsEditSplit = "context"


" -------------- QuickRun
let g:quickrun_config = {}
let g:quickrun_config.haskell = {'command': 'stack',
                                \'cmdopt': 'runhaskell',
                                \}
nmap <leader>q <esc>:QuickRun<CR>

" ------- CtrlP {{{
let g:ctrlp_cmd = 'CtrlPMRU'
"  " }}}
"

" ------- Goyo.vim
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  set bg=light
  if !has('gui_running')
  let g:solarized_termcolors=256
  endif
  colors solarized
endfunction
 
command! ProseMode call ProseMode()
nmap <leader>p :ProseMode
" }}}



" =================== Reference URLs =========================================
" ==                                                                        ==
" == http://d.hatena.ne.jp/osyo-manga/20140307/1394204974                   ==
" ==  -> documents for textobj and operators                                ==
" ==                                                                        ==
" ==     		http://vim-jp.org                                   ==
" ==               VIM Japanese community site                              ==
" ==                                                                        ==
" ==          https://gitter.im/vim-jp/reading-vimrc                        ==
" ==               .vimrc Reading Community chat                            ==
" ============================================================================
