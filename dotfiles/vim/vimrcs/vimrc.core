set nocompatible

" ================ Generals ================================= {{{
set modeline
set modelines=5
set cursorline
set number
set relativenumber
set autowriteall
syntax on

" Searching options
set ignorecase
set smartcase

set expandtab " replace <tab> with <space>
set tabstop=2 " width <tab> hold
set shiftwidth=2 " width auto-indent
	" highlight ZENKAKU-SPACE not to miss them
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /ã€€/
  " display unvisible letter
  "   tab: >>-
set list
set listchars=tab:>-,trail:-,extends:>,precedes:<,nbsp:%
set foldmethod=marker

" Wildmenu setup
set wildmenu
set wildchar=<TAB>
set wildmode=list:longest
set wildignore+=*.DS_STORE,*.jpg,*.png,*.gif

" Draw the statusline
set laststatus=2

set statusline=[*_*]\ \ \|F:\ %f,\ \|ft:\ %y,\ \|buf:\%n%=%{FugitiveStatusline()}%P

" }}}

" ================ file types ================================= {{{


  " iskeyword define which letter is included as word
au BufNewFile,BufRead *.sh set iskeyword=.,@,48-57,_,192-255
au BufNewFile,BufRead *.bats set dictionary=$HOME/.vim/dictionary/bats.dict
au BufNewFile,BufRead .editorconfig set dictionary=$HOME/.vim/dictionary/editorconfig.dict
au BufNewFile,BufRead CHANGELOG* set dictionary=$HOME/.vim/dictionary/CHANGELOG.dict

" --- templates
au BufNewFile *.dia 0r $HOME/.vim/template/diary.txt
au BufNewFile pack.mcmeta 0r $HOME/.vim/template/pack.mcmeta
au BufNewFile *.bats 0r $HOME/.vim/template/bats.bats
au BufNewFile *.oo.sh 0r $HOME/.vim/template/bash-oo-framework.sh
au BufNewFile *.sh 0r $HOME/.vim/template/shell.sh
au BufNewFile CHANGELOG.md 0r $HOME/.vim/template/CHANGELOG


" tell vim that .sh is bash script by default
let g:is_bash = 1

  " folding options

"au BufWinLeave * mkview " automatically save folding
"au BufWinEnter * silent loadview " automatically load folding

" }}}

" ================== Key binds ============================== {{{
" set SPACEKEY to <leader> {{{2
nnoremap <space> <nop>
xnoremap <space> <nop>
let mapleader = " "
" }}}

	" jj to exit insert-mode
inoremap <silent> jj <ESC> 
	" <C-o><C-o> to print time in normal-mode
inoremap <C-o><C-o> <C-r>=strftime('(%T %p)') <LF>
	" <C-o>d to print data in normal-mode
nnoremap <C-o>d <ESC>i<C-r>=strftime('< %F >')<LF><LF>
	" Reload .vimrc by pushing <C-o>i
nnoremap <C-o>i <ESC>:source ~/.vimrc<LF><LF>

	" Automatically insert the pair
inoremap [ []<left>
inoremap ( ()<left>
inoremap { {}<left>
inoremap " ""<left>

" moving around buffers
" bn : go to next buffer
" bp : go to previous buffer
nnoremap <silent> bn <ESC>:bnext<LF>
nnoremap <silent> bp <ESC>:bprevious<LF>



" show hint for <C-x> completion {{{2
  " dictionary of input key
  let s:compl_key_dict = {
    \ char2nr("\<C-l>"): "\<C-x>\<C-l>",
    \ char2nr("\<C-n>"): "\<C-x>\<C-n>",
    \ char2nr("\<C-p>"): "\<C-x>\<C-p>",
    \ char2nr("\<C-k>"): "\<C-x>\<C-k>",
    \ char2nr("\<C-t>"): "\<C-x>\<C-t>",
    \ char2nr("\<C-i>"): "\<C-x>\<C-i>",
    \ char2nr("\<C-]>"): "\<C-x>\<C-]>",
    \ char2nr("\<C-f>"): "\<C-x>\<C-f>",
    \ char2nr("\<C-d>"): "\<C-x>\<C-d>",
    \ char2nr("\<C-v>"): "\<C-x>\<C-v>",
    \ char2nr("\<C-u>"): "\<C-x>\<C-u>",
    \ char2nr("\<C-o>"): "\<C-x>\<C-o>",
    \ char2nr('s'): "\<C-x>s",
    \ char2nr("\<C-s>"): "\<C-x>s"
    \ }

  " display message
  let s:hint_i_ctrl_x_msg = join([
    \ '<C-l>: while lines',
    \ '<C-n>: keywords in the current file',
    \ "<C-k>: keywords in 'dictionary'",
    \ "<C-t>: keywords in 'thesaurus'",
    \ '<C-i>: keywords in the current and included files',
    \ '<C-]>: tags',
    \ '<C-f>: file names',
    \ '<C-d>: difinitions or macros',
    \ '<C-v>: Vim command-line',
    \ "<C-u>: User defined completion ('completefunc')",
    \ "<C-o>: omni completion ('omnifunc')",
    \"s: Spelling suggestions ('spell')"
    \],"\n")

  function! s:hint_i_ctrl_x() abort
    echo s:hint_i_ctrl_x_msg
    let c = getchar()
    return get(s:compl_key_dict, c, nr2char(c))
  endfunction

  inoremap <expr> <C-x> <SID>hint_i_ctrl_x()
" }}}

" move phisical line even when cursor is on in long line {{{2
" If there's long and wrapped lines, then j and k behave unnaturally. This
" mapping makes movements operate on 1 screen line in wrap mode.
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
" }}}

"  DOESN'T WORK AT THIS TIME {{{2
"  " toggle logging mode. In this mode, date will be inserted for each line
"function! s:toggle_logging_mode()
"  if b:Cj_bc_logging_mode == v:false
"    echo "--Logging mode--"
"    inoremap <CR> <CR><C-r>=strftime('(%T %p)') <LF> 
"    nnoremap o $a<CR><C-r>=strftime('(%T %p)') <LF> 
"    let b:Cj_bc_logging_mode = v:true
"  else
"    echo "--Quite Logging mode--"
"    iunmap <CR>
"    nunmap o
"    let b:Cj_bc_logging_mode = v:false
"  endif
"endfunction
"
"nmap <silent>Lg <SID>toggle_logging_mode()
" }}}

" key bind for vim-codereview
nnoremap ,cc <ESC>:CodeReviewCommentChange <LF>
nnoremap ,ch <ESC>:CodeReviewComment <LF>
nnoremap ,cr <ESC>:CodeReviewReloadComments <LF>

" key binds for operator mappings 
nnoremap <silent>sa <Plug>(operator-surround-append)
nnoremap <silent>sd <Plug>(operator-surround-delete)
nnoremap <silent>sr <Plug>(operator-surround-replace)
" }}}

" ================== for default plugins ============================== {{{

" ------- netrw
" usage:
"   i --- change view mode
"   v --- open file on the side
"   o --- open file up to the newtw
let g:netrw_liststyle = 3 " force tree view (can be toggled by 'i' button)
let g:netrw_altv = 1 " open files on the right side when 'v' is pushed

" ------ UML view in chrome
au FileType plantuml command! OpenUML :!open -a % 
au BufRead *.uml command! OpenUML :!open -a % 

" ------ fzf in vim (if exists)
if isdirectory('/usr/local/opt/fzf')
  set rtp+=/usr/local/opt/fzf
endif

" }}}


" =================== Reference URLs =========================================
" ==                                                                        ==
" == http://vimblog.hatenablog.com/entry/vimrc_key_mapping                  ==
" ==      -> difference between key-bind commands                           ==
" == http://d.hatena.ne.jp/hyuki/20130714/vim                               ==
" ==      -> time-insert key-bind                                           ==
" == https://qiita.com/annyamonnya/items/97c5cb0cfa414b3592d7               ==
" ==      -> Cheat sheet of strftime() function                             ==
" == https://qiita.com/_snow_narcissus/items/f1633ecc40814acca4cf           ==
" ==      -> Automatically insert the pair                                  ==
" == http://vimblog.hatenablog.com/entry/vimrc_set_tab_indent_options       ==
" == 	    -> settings related with <tab>				                            ==
" == http://blog.tojiru.net/article/234400966.html                          ==
" ==      -> settings of netrw config                                       ==
" == http://blog.remora.cx/2011/08/display-invisible-characters-on-vim.html ==
" ==      -> visible unvisible letters (set list)                           ==
" == http://koturn.hatenablog.com/entry/2018/02/10/170000                   ==
" ==      -> display hint of <C-x>                                          ==
" == http://d.hatena.ne.jp/osyo-manga/20140307/1394204974                   ==
" ==      -> documents for textobj and operators                            ==
" == http://ivxi.hatenablog.com/entry/2013/05/23/163825                     ==
" ==      -> keymapping for buffers                                         ==
" == https://qiita.com/kojionilk/items/67379e68cf54d811081a                 ==
" ==      -> Searching options                                              ==
" == https://github.com/rouxbuciu/dotfiles .vimrc                           ==
" ==      -> wildmenu, relativenumber, laststatus
" ==                                                                        ==
" ==     		http://vim-jp.org                                               ==
" ==               VIM Japanese community site                              ==
" ==                                                                        ==
" ==          https://gitter.im/vim-jp/reading-vimrc                        ==
" ==               .vimrc Reading Community chat                            ==
" ============================================================================
