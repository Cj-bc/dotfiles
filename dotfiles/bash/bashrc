# If not running interactively, do nothing.
[[ $- != *i* ]] && return

cat ~/.bashrc.banner

# ========== variables ========== {{{1
LANG=ja_JP.UTF-8
export PATH="${PATH}:${HOME}/.local/bin"
# }}}
# ================================= Functions ================================ {{{1

# git_branch() {{{2
# check current git branch
git_branch() {
  echo $(git branch 2>/dev/null | sed -ne "s/^\* \(.*\)$/\1/p")
}

# torf() {{{2
# reset exit status code to previous command
function torf() {
  return $stat
}

# wtdd() {{{2
# let watch todo daemon know where you are now
function wtdd {
  [ -f ~/.wtdd ] && echo "$(pwd)" >~/.wtdd 2>/dev/null
}

# forecolor() {{{2
# output all colors for foreground
function forecolor {
  for i in {0..255};do
    if [ $(( i % 10)) -eq 0 ];then
      echo "| $i"
    fi
    tput setaf $i
    echo -n '#'
    tput sgr0
  done
}

# backcolor() {{{2
# output all colors for background
function backcolor {
  for i in {0..255};do
    if [ $(( i % 10)) -eq 0 ];then
      echo "| $i"
    fi
    tput setab $i
    echo -n '#'
    tput sgr0
  done
}

# notes() {{{2
# shell utility for Notes vim command
function notes {
  if [[ $# -eq 0 ]];then
    vim +Notes
  else
    vim +"Notes $1"
  fi
}

# google() {{{2
# google the word with w3m
type w3m >/dev/null 2>&1 &&
function google() {
  [ $# -ne 0 ] && w3m https://www.google.com/search?q=${@// /+}  || w3m google.com #usage: google [word]
}

# init() {{{2
# initialize git repository & create reamote
function init() {
  if [ -d .git ]; then
    echo "aleady initialized"
    return
  fi

  case "$1" in
    "-i" ) shift
      local target
      for target in $@
      do
        if [ "$target" = 'git' ] || [ "$target" = 'flow' ] || [ "$target" = 'hub' ]; then
          eval "local _${target}=1"
        fi
      done
        ;;
    "-h"|"--help" ) echo 'usage: init [-i git|flow|hub]' ;;
  esac


  [ "${_git:-1}" -eq 1 ] && git init
  [ "${_flow:-1}" -eq 1 ] && git flow init
  [ "${_hub:-1}" -eq 1 ] && hub create
}
# }}}
# mkrepo: make repository under ghq dir {{{
type ghq >/dev/null 2>&1 &&
  function mkrepo()
  {
    local repo_name="$1"; [ -z "$repo_name" ] && return
    local repo_path="$(ghq root)/github.com/Cj-bc/$repo_name"

    echo "making repository [$repo_name]"
    mkdir "$repo_path"

    cd "$repo_path"
    init -i flow
  }
# }}}
# :tabe : open given file in vim/ or search file with fzf and open in vim {{{2
function :tabe() {
if [[ $# -ne 0 ]]; then
  vim "$*"
else
  vim $(fzf)
fi
}
# }}}
# :e : almost same as :tabe {{{2
function :e() {
if [[ $# -ne 0 ]]; then
  vim "$*"
else
  vim $(fzf)
fi
}
# }}}
# trello: Wrapper of taskell for Trello {{{
function trello()
(
  cd ~/.local/share/taskell/trello;
  case "$1" in
    "-h"|"help"|"--help")
      cat <<EOF
          trello [-h | csv | update]
          options:
            -h/--help/help : show this help
            csv : edit csv file which define trello board ids
            update/Update/-u : update boards
EOF
      ;;
    "csv" )
      vim trello.csv;;
    "Update"|"update"|"-u")
      while IFS=", " read id task_name; do
        rm $task_name
        yes | taskell -t "$id" "$task_name"
      done < <(cat trello.csv)
      ;;
    "" )
      f="$(ls | grep -v "trello.csv" | fzf)";
      test -z "$f" || taskell "$f";
      ;;
  esac
)


function tweet() {
  vim -c "TweetVimCommandSay ${*}" -c q!
}
# }}}
# pushall: Push all commits of all repositories under ghq {{{
function pushall()
(
  function s:is_my_repo() {
    [ -d .git ] || return 1
    grep -e 'url = https://github.com/Cj-bc/.*' .git/config >/dev/null
  }

  function s:unlines() {
    [ -p /dev/stdin ] && cat - && return
    return "$1"
  }

  function s:my_remote() {
    echo $(git remote -v | grep 'Cj-bc.*(push)' | awk '{print $1}')
  }

  local dst="${1:-$(ghq root)/*}"

  for d in $dst; do (
      cd $d
      if s:is_my_repo; then
        for remote in $(s:my_remote);do
          git push "$remote" --all >/dev/null 2>&1 \
            && echo "$d: ${remote}: $(tput setaf 2)pushed$(tput sgr0)" \
            || echo "$d: ${remote}: $(tput setaf 1)failed$(tput sgr0)"
        done
      else
        test -d .git && return
        recursive="$(ls -p | grep '.*/' | sed 's/\///' | s:unlines )"
        [ -z "$recursive" ] && return
        pushall "$recursive"
      fi
    )
  done
)


# balance: show financial datas {{{
BALANCE_BOOK_PATH="$HOME/Dropbox/howm/2019/08/2019-08-12-170214.md"
function balance() {
  local csv="$(cat "$BALANCE_BOOK_PATH" | grep '^| *' | sed 's/| //g')"

  function s:deposit() {
    awk -v FS=', ' '/Deposit/ {i += $3 }
                    END {print "total deposit:\t",i,"yen"}' <(echo "$1")
  }

  function s:withdraw() {
    awk -v FS=', ' '/Withdraw/ {i += $3 }
                    END {print "total withdraw:\t",i,"yen"}' <(echo "$1")
  }

  function s:balance() {
    awk -v FS=', ' '/Withdraw/ {i -= $3}
                    /Deposit/ {i += $3 }
                    END {print "balance:\t",i,"yen"}' <(echo "$1")
  }

  function s:query() {
    local query="$1"
    local csv="$2"

    awk -v FS=', ' -v query="$query" 'BEGIN {isFirst = true}
                                      {if (match($4, query))
                                        { if (isFirst == "false") print "-----------";
                                          isFirst = "false";
                                          print "date:\t", $1;
                                          print "type:\t", $2;
                                          print "price:\t", $3;
                                          print "details:";
                                          print "\t", $4;
                                        }
                                     }' <(echo "$csv")
  }

  case $1 in
    "--help"|"-h"|"help") cat <<EOF
balance:
      balance deposit        --- show total deposit
      balance withdraw       --- show total withdraw
      balance balance        --- show current balance
      balance all            --- show all of {deposit,withdraw,balance}
      balance help/-h/--help --- show this help

ENVIRONMENT VARIABLE:
      BALANCE_BOOK_PATH: path to file that stores data
EOF
      ;;
    "deposit")  s:deposit "$csv";;
    "withdraw") s:withdraw "$csv";;
    "balance")  s:balance "$csv";;
    "query")    s:query "$2" "$csv";;
    "all")      s:deposit "$csv"
                s:withdraw "$csv"
                s:balance "$csv";;
  esac
}
# 2}}}

# }}}
# makeQuote: Create markdown style quote
function makeQuote() { cat - | awk '{print ">", $0}'; }
# repo {{{
function repo() {
  local p="$(ghq root)/$(ghq list |fzf)"
  [[ $p == $((ghq root)) ]] &&  cd "$p" || true
}
# }}}
# emacs : invoke emacsclient if emacs is running {{{2
function emacs() {
  local emacsProcess="$(ps | awk '{print $4}' | grep '^emacs$')"
  [ -z "$emacsProcess" ] \
    && { command emacs&
         emacs "$@" ; } \
    || emacsclient "$@"
}
# }}}

# ================================= Pronpts ================================== {{{1

export PS1="\`stat=\"\$?\";test "$VIRTUAL_ENV" && echo -n '(VIRTUALENV) ';echo -n '\$?is'\$stat;[ -e ./.git ] && echo -n [\$(git_branch)];[ $VIM ] && echo -n '(vim)';echo -n \"<\$(tty | tail -c +6)>\";echo '\r';[ \${stat} = 0 ] && echo \[\e[33m\]\<X_X\>\[\e[0m\] || echo \[\e[31m\]\<@_@\>\[\e[0m\];torf;wtdd\`:\W\\$ " # \ before $value is really important!
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME:+$FUNCNAME(): }' # setting debug prompt

# ================================= Daemons ================================== {{{1

# for watchtodo
if [ -d ~/.watchtodo ];then
  export PS1="${PS1}\$(echo \"$(tty) : $(pwd) \" >~/.watchtodo/pwd 2>/dev/null)"
fi
# ================================= Alias ==================================== {{{1
if [ "$(uname)" = 'Darwin' ]; then
    alias ls='ls -G'
else
    eval `dircolors ~/.colorrc`
    alias ls='ls --color=auto'
fi
alias la='ls -a'
alias ll='ls -l'
alias tree='tree -C'
alias bashrc='source ~/.bashrc'
alias bash_profile='source ~/.bash_profile'
alias back='cd $OLDPWD'
alias prs='ghi | grep â†‘'
alias vim7='/usr/bin/vim'
alias qiita="vim $(ghq root)/$(ghq list | grep Cj-bc/qiita-post)/"

# ------------ crons {{{2
alias mkcron='crontab -e'
alias lscron='crontab -l'

# ------------ gits {{{2
alias mkpr='hub pull-request'
alias gs='git status'
alias gd='git diff'
alias gc='git commit'
alias gca='git commit --amend'
alias glo='git log --oneline'
alias gp='git push origin'
alias gpa='git push origin --all && git push origin --tags'
alias pullAll='for d in $(ghq list | grep Cj-bc); do (cd $(ghq root)/$d; git pull >/dev/null 2>&1 && echo "$d: PULLED" || echo "$d: FAILED");done'
alias pushAll='for d in $(ghq list); do (cd $(ghq root)/$d; git push origin --all >/dev/null 2>&1 && echo "$d: PULLED" || echo "$d: FAILED");done'

# ------------ apps {{{2
alias siri='open /Applications/Siri.app'
alias drp='cd ~/Dropbox && ls'
alias stopwatch='utimer --stopwatch'
alias dia='vim ~/.diary/$(date "+%Y/%m/%d").md' # not used as I have QfixHwm right now...
alias td='todo.sh'
alias dotdrop='$HOME/dotfiles/dotdrop.sh'
alias jnethack='cocot -t UTF-8 -p cp932 -- ~/nethackdir/jnethack'
if [ -d '/Applications/Koto-Qt.app' ]; then
  alias koto-cli='/Applications/Koto-Qt.app/Contents/MacOS/koto-cli'
  alias kotod='/Applications/Koto-Qt.app/Contents/MacOS/kotod'
fi
if [ -e '/usr/local/Cellar/sclack/alpha/bin/app.py' ]; then
  alias sclack='(cd /usr/local/Cellar/sclack/alpha/bin;./app.py)'
fi
if $(which misskey-cli >/dev/null 2>&1); then
  alias ms='misskey-cli --quiet notes/create --text '
fi
# ------------ networks {{{2
alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'
alias wport='networksetup -setairportpower' # usage: wport <device> <on/off>
alias wifi='networksetup -setairportnetwork' # usage: wifi <device> <SSID> <password>



shopt -s xpg_echo

[ -a "~/.nodebrew" ] &&
  export PATH=$PATH:~/.nodebrew/current/bin


#=================== setting for ssh-agent {{{1

export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent

# this will prevent us from losing ssh-agent on tmux when we re-connect ssh
agent="~/.gnupg/S.gpg-agent.ssh"
if [ -S "$SSH_AUTH_SOCK" ]; then
      case $SSH_AUTH_SOCK in
        /tmp/*/agent.[0-9]*)
              ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
      esac
elif [ -S $agent ]; then
  export SSH_AUTH_SOCK=$agent
else
  echo "no ssh-agent"
fi

# ================== setting for todo-txt {{{1
if [ -f /usr/local/etc/bash_completion.d/todo_completion ];then
  source /usr/local/etc/bash_completion.d/todo_completion
  complete -F _todo td # set todo.sh completion for td alias
fi


# ================== setting for linuxbrew {{{1

if [ -d ~/.linuxbrew ];then
  PATH="$HOME/.linuxbrew/bin:$PATH"
  export MANPATH="$(brew --prefix)/share/man:$MANPATH"
  export INFOPATH="$(brew --prefix)/share/info:$INFOPATH"
fi

# ================== setting for pyenv {{{
export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/shims:$PATH
eval "$(pyenv init -)"


# ------------ go {{{
export GOPATH=$HOME/.go
export PATH="${PATH}:${GOPATH}/bin"

# ------------ fzf {{{
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# ------------ poetry {{{
export PATH="$HOME/.poetry/bin:$PATH"

# =========================== Reference ========================================= {{{1
# ==                                                                           == 
# ==  https://qiita.com/kawaz/items/65cdbeaa739c4e6b7776                       ==
# ==      -> setting of PS4                                                    ==
# == http://note.kurodigi.com/bashprompt-customize/                            ==
# ==      -> color of PS1(echo command)                                        ==
# == https://news.mynavi.jp/article/20090909-bash/                             ==
# ==      -> change PS1 when $? -ne 0                                          ==
# == https://qiita.com/iwazer/items/5f57a80b8aac0f4e9839                       ==
# ==      -> add git-branch in PS1                                             ==
# == https://qiita.com/sonots/items/2d7950a68da0a02ba7e4                       ==
# ==      -> setting of ssh-agent                                              ==
# ===============================================================================
