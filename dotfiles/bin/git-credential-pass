#!/usr/bin/env bash
#
# git-credential-pass -- use pass for git-credential backend
#
# Related post: https://cj-bc.github.io/blog/posts/2021-04-13-git-use-pass-for-git-credential.html

debugLog() {
  [ -v GIT_CREDENTIAL_PASS_DEBUG ] && echo "$@" >>~/.cache/git-credential-pass.log
}

function createStoreKey {
    case $1 in
      "store") echo "git-cli/${2}:${3}/${4}";;
      "get")   echo "git-cli/${2}:${3}";;
      *) ;;
    esac
}

function store_key() {
  declare -A input=()

  # I need -r to not to use \ as escape character
  while IFS=\= read -r key value; do
    input[$key]=$value
  done < <(cat -)

  store_key=$(createStoreKey "store" ${input[protocol]} ${input[host]} ${input[username]})

  debugLog "Save credential info into pass."
  debugLog "Key is set to \"${store_key}\""
  cat <<EOF | pass insert $store_key
${input[password]}
${input[password]}
EOF

  [ $? -eq 0 ] && debugLog "Credential saved noormally" \
               || debugLog "Failed to save credential"
}


function get_key() {
  declare -A input=()

  while IFS=\= read -r key value; do
    [[ ${#key} -eq 0 ]] && continue
    input[$key]=$value
  done < <(cat -)

  store_key=$(createStoreKey "get" ${input[protocol]} ${input[host]})

  username="${input[username]}"
  if [[ -z $username ]]; then
    debugLog "uesrname isn't provided. Try to look up username for storekey '$store_key' from pass output"
    username=$(LANG=C pass show "${store_key}" | awk -v store_key="$store_key" '$1 == store_key { getline; sub("`-- +", ""); print }')
  fi

  [[ -z $username ]] && { debugLog "failed to look up user for ${store_key}. exit" ; return; }

  debugLog "store_key is '${store_key}', and uesrname is '$username'"
  password=$(LANG=C pass show "${store_key}/$username")
  cat <<EOF
username=$username
password=$password
EOF
}

# I don't know what input does 'erase' expect.
function erase_key() {
  return
}

case $1 in
  "get") get_key;;
  "store") store_key;;
  "erase") erase_key;;
  *) ;;
esac
