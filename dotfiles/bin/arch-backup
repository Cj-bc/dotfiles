#!/bin/bash

# Back up script for my archlinux

# ========== Configure part

# Path to the directory you want to make backup (This directory is used as 'root' of the backup)
backupDir=${BACKUPDIR:=/mnt/backup/$(date +%Y-%m-%d)}

case "$1" in
  "--dry-run" )
    declare DRYRUN=1
    ;;
  *)
    ;;
esac

# Path that won't be in backup
excludeDirs=("/dev/*" "/proc/*" "/sys/*" "/tmp/*" "/run/*" "/mnt/*" "/media/*" "/lost+found"  # defaults from wiki
             "${XDG_CACHE_HOME:-$HOME/.cache}/*" "${XDG_RUNTIME_DIR}/*" # XDG dirs
             "$HOME/.cache/*" # common dirs
             "$HOME/.config/Slack/Cache/*" "$HOME/.config/Slack/Code\ Cache/*" "$HOME/.config/Slack/GPUCache/*"
             "$HOME/.config/discord/Cache/*"
             "$HOME/.xmonad/xmonad-x86_64-linux" "$HOME/.xmonad/xmonad.hi" "$HOME/.xmonad/xmonad.o"
             "$HOME/.vim/bundle/*"
             "$HOME/.cargo/*"
            )

echo "skipping to exclude tmp directories for now..."
echo "TODO: I want to cache those tmpPath and refer them"
#
# echo -n "Finding tmp directories"
# for tmpPath in $(find / -regex '.*/[Tt]e?mp' ! -regex '/sys/.*' 2>/dev/null); do
#   excludeDirs=("${excludeDirs[@]}" "$tmpPath")
#   echo -n "."
# done
# echo "Done"

# includeDirs : [Path]
# Those paths will be ensured to be included in backup.
# Without this, 
includeDirs=()

logDir=${XDG_CACHE_HOME:-~/.cache}/arch-backup/logs
logFile=$logDir/$(date +%Y-%m-%d).log

# Make backup of git repositories only if they have uncommited modifications
for p in $(ghq list); do (
  cd $(ghq root)/$p
  [[ -z $(git status --short 2>/dev/null) ]] && excludeDirs=(${excludeDirs[@]} "$(ghq root)/$p") \
                                             || includeDirs=(${includeDirs[@]} "$(ghq root)/$p")
  )
done



# ========== Main

filters=()
for i in "${includeDirs[@]}"; do
  filters=("${filters[@]}" "--include=\"$i\"")
done

for e in "${excludeDirs[@]}"; do
  filters=("${filters[@]}" "--exclude=\"$e\"")
done

if [ -v DRYRUN ]; then
  echo "dry-run: rsync -rltAX --info=progress2 ${filters[@]} / $backupDir |& tee $logFile"
else
  [[ -d $backupDir ]] || mkdir $backupDir
  [[ -d $logDir ]] || mkdir -p $logDir
  rsync -rltAX --info=progress2 ${filters[@]} / $backupDir |& tee $logFile
  true
fi

dunstify --appname "arch-backup" "backup is finished!"
